// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGrpcTestPing = "/service.v1.GrpcTest/Ping"
var PathGrpcTestGrpcUserInfoTest = "/service.v1.GrpcTest/GrpcUserInfoTest"

var PathTokenVerify = "/service.v1.Token/Verify"

// GrpcTestBMServer is the server API for GrpcTest service.
type GrpcTestBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `method:"POST"`
	GrpcUserInfoTest(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)
}

var GrpcTestSvc GrpcTestBMServer

func grpcTestPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GrpcTestSvc.Ping(c, p)
	c.JSON(resp, err)
}

func grpcTestGrpcUserInfoTest(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GrpcTestSvc.GrpcUserInfoTest(c, p)
	c.JSON(resp, err)
}

// RegisterGrpcTestBMServer Register the blademaster route
func RegisterGrpcTestBMServer(e *bm.Engine, server GrpcTestBMServer) {
	GrpcTestSvc = server
	e.GET("/service.v1.GrpcTest/Ping", grpcTestPing)
	e.POST("/service.v1.GrpcTest/GrpcUserInfoTest", grpcTestGrpcUserInfoTest)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
