// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorknetProfessionChoiceResp struct {
	//职业名
	ProfessionName []string `protobuf:"bytes,1,rep,name=professionName,proto3" json:"professionName"`
	//数量
	Number               []string `protobuf:"bytes,2,rep,name=number,proto3" json:"number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetProfessionChoiceResp) Reset()         { *m = WorknetProfessionChoiceResp{} }
func (m *WorknetProfessionChoiceResp) String() string { return proto.CompactTextString(m) }
func (*WorknetProfessionChoiceResp) ProtoMessage()    {}
func (*WorknetProfessionChoiceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *WorknetProfessionChoiceResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetProfessionChoiceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetProfessionChoiceResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetProfessionChoiceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetProfessionChoiceResp.Merge(m, src)
}
func (m *WorknetProfessionChoiceResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetProfessionChoiceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetProfessionChoiceResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetProfessionChoiceResp proto.InternalMessageInfo

type WorknetProfessionSalaryResp struct {
	//职业名
	ProfessionName []string `protobuf:"bytes,1,rep,name=professionName,proto3" json:"professionName"`
	//薪水
	Salary               []string `protobuf:"bytes,2,rep,name=salary,proto3" json:"salary"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetProfessionSalaryResp) Reset()         { *m = WorknetProfessionSalaryResp{} }
func (m *WorknetProfessionSalaryResp) String() string { return proto.CompactTextString(m) }
func (*WorknetProfessionSalaryResp) ProtoMessage()    {}
func (*WorknetProfessionSalaryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WorknetProfessionSalaryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetProfessionSalaryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetProfessionSalaryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetProfessionSalaryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetProfessionSalaryResp.Merge(m, src)
}
func (m *WorknetProfessionSalaryResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetProfessionSalaryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetProfessionSalaryResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetProfessionSalaryResp proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorknetProfessionChoiceResp)(nil), "service.v1.WorknetProfessionChoiceResp")
	proto.RegisterType((*WorknetProfessionSalaryResp)(nil), "service.v1.WorknetProfessionSalaryResp")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x3d, 0x63, 0x88, 0xe4, 0x05, 0x0e, 0xd8, 0x02, 0x82, 0x23, 0xd9, 0x27, 0x37, 0x9c, 0x84,
	0xd8, 0x13, 0x41, 0xa2, 0xa0, 0x23, 0x40, 0x01, 0x48, 0xa7, 0x93, 0x39, 0x81, 0x74, 0x05, 0xc8,
	0xf6, 0x4d, 0x7c, 0xab, 0xc4, 0xde, 0x65, 0xd7, 0x8e, 0xe4, 0x82, 0xff, 0xe0, 0x7f, 0x68, 0x52,
	0xf2, 0x05, 0x16, 0x84, 0xce, 0x5f, 0x81, 0xbc, 0x6b, 0xb0, 0x13, 0x62, 0x0a, 0x48, 0x35, 0x3b,
	0x6f, 0x66, 0xde, 0x1b, 0xed, 0x3c, 0x64, 0x05, 0x9c, 0x12, 0x2e, 0x58, 0xc6, 0x30, 0x92, 0x20,
	0x16, 0x34, 0x02, 0xb2, 0x78, 0x68, 0x3f, 0x88, 0x69, 0x76, 0x91, 0x87, 0x24, 0x62, 0xc9, 0x51,
	0xcc, 0x62, 0x76, 0xa4, 0x5a, 0xc2, 0x7c, 0xaa, 0x32, 0x95, 0xa8, 0x97, 0x1e, 0xb5, 0x47, 0x31,
	0x63, 0xf1, 0x1c, 0xda, 0x2e, 0x48, 0x78, 0x56, 0xe8, 0xa2, 0xf7, 0x09, 0x8d, 0xde, 0x31, 0x31,
	0x4b, 0x21, 0x3b, 0x11, 0x6c, 0x0a, 0x52, 0x52, 0x96, 0x3e, 0xbb, 0x60, 0x34, 0x02, 0x1f, 0x24,
	0xc7, 0x4f, 0xd0, 0x3e, 0xff, 0x8d, 0x1f, 0x07, 0x09, 0x0c, 0x8d, 0x03, 0xf3, 0xd0, 0x9a, 0xe0,
	0xaa, 0x74, 0x37, 0x2a, 0xfe, 0x46, 0x8e, 0x3d, 0x34, 0x48, 0xf3, 0x24, 0x04, 0x31, 0xbc, 0xa4,
	0x66, 0x50, 0x55, 0xba, 0x0d, 0xe2, 0x37, 0x71, 0xab, 0xfc, 0x9b, 0x60, 0x1e, 0x88, 0x62, 0x17,
	0xf2, 0x52, 0x31, 0x75, 0xe5, 0x35, 0xe2, 0x37, 0xd1, 0x7b, 0x8e, 0xf6, 0xdf, 0x82, 0xa0, 0xd3,
	0xe2, 0x94, 0xcd, 0x20, 0xf5, 0xe1, 0x23, 0x1e, 0xa3, 0xab, 0x41, 0x14, 0x81, 0x94, 0x0a, 0x19,
	0x1a, 0x07, 0xc6, 0xa1, 0x35, 0xb9, 0x59, 0x95, 0xee, 0x35, 0x0d, 0x7f, 0xc8, 0x54, 0x67, 0xb7,
	0xc9, 0x0b, 0xd1, 0x8d, 0x35, 0x16, 0xc9, 0x6b, 0xf1, 0x5c, 0x82, 0x78, 0x79, 0xae, 0x18, 0x4c,
	0x2d, 0xae, 0x11, 0xbf, 0x89, 0xf8, 0x3e, 0xb2, 0x44, 0x90, 0x9e, 0xb3, 0xe4, 0x35, 0xd4, 0x3b,
	0xd6, 0x42, 0xd7, 0xab, 0xd2, 0x6d, 0x41, 0xbf, 0x7d, 0x8e, 0xbf, 0x98, 0xe8, 0xd6, 0x1f, 0x3f,
	0x85, 0x1f, 0xa3, 0xcb, 0x27, 0x34, 0x8d, 0xf1, 0x6d, 0xa2, 0x6f, 0x4c, 0x7e, 0xdd, 0x98, 0xbc,
	0xa8, 0x6f, 0x6c, 0xf7, 0xe0, 0xf8, 0x0c, 0xdd, 0xe9, 0xb9, 0x7a, 0x2f, 0xd5, 0x3d, 0xd2, 0x3a,
	0x90, 0xfc, 0xcd, 0x32, 0xdb, 0xb8, 0xf5, 0x49, 0xff, 0x91, 0xbb, 0xe3, 0x87, 0xf7, 0x5b, 0xec,
	0x72, 0x5a, 0x70, 0x38, 0x56, 0x6e, 0xfa, 0xff, 0xdd, 0xfb, 0xf8, 0x77, 0xb4, 0xff, 0xf8, 0x15,
	0xba, 0xa2, 0x3c, 0x82, 0x9f, 0xa2, 0x81, 0xb6, 0x0c, 0xb6, 0xbb, 0xb3, 0xeb, 0x66, 0xb4, 0x47,
	0xbd, 0x35, 0xc9, 0x27, 0x77, 0x97, 0xdf, 0x9d, 0xbd, 0xe5, 0xca, 0x31, 0xbe, 0xae, 0x1c, 0xe3,
	0xdb, 0xca, 0x31, 0x3e, 0xff, 0x70, 0xf6, 0xce, 0xcc, 0x80, 0xd3, 0x70, 0xa0, 0xf6, 0x7b, 0xf4,
	0x33, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xfd, 0x29, 0x39, 0x40, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorknetProfessionClient is the client API for WorknetProfession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorknetProfessionClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	WorknetProfessionChoice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionChoiceResp, error)
	// `method:"POST"`
	WorknetProfessionSalary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionSalaryResp, error)
	// `method:"POST"`
	WorknetProfessionTypeNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionChoiceResp, error)
	// `method:"POST"`
	WorknetProfessionTypeSalary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionSalaryResp, error)
}

type worknetProfessionClient struct {
	cc *grpc.ClientConn
}

func NewWorknetProfessionClient(cc *grpc.ClientConn) WorknetProfessionClient {
	return &worknetProfessionClient{cc}
}

func (c *worknetProfessionClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetProfession/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetProfessionClient) WorknetProfessionChoice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionChoiceResp, error) {
	out := new(WorknetProfessionChoiceResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetProfession/WorknetProfessionChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetProfessionClient) WorknetProfessionSalary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionSalaryResp, error) {
	out := new(WorknetProfessionSalaryResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetProfession/WorknetProfessionSalary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetProfessionClient) WorknetProfessionTypeNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionChoiceResp, error) {
	out := new(WorknetProfessionChoiceResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetProfession/WorknetProfessionTypeNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetProfessionClient) WorknetProfessionTypeSalary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetProfessionSalaryResp, error) {
	out := new(WorknetProfessionSalaryResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetProfession/WorknetProfessionTypeSalary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorknetProfessionServer is the server API for WorknetProfession service.
type WorknetProfessionServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	WorknetProfessionChoice(context.Context, *empty.Empty) (*WorknetProfessionChoiceResp, error)
	// `method:"POST"`
	WorknetProfessionSalary(context.Context, *empty.Empty) (*WorknetProfessionSalaryResp, error)
	// `method:"POST"`
	WorknetProfessionTypeNumber(context.Context, *empty.Empty) (*WorknetProfessionChoiceResp, error)
	// `method:"POST"`
	WorknetProfessionTypeSalary(context.Context, *empty.Empty) (*WorknetProfessionSalaryResp, error)
}

// UnimplementedWorknetProfessionServer can be embedded to have forward compatible implementations.
type UnimplementedWorknetProfessionServer struct {
}

func (*UnimplementedWorknetProfessionServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorknetProfessionServer) WorknetProfessionChoice(ctx context.Context, req *empty.Empty) (*WorknetProfessionChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetProfessionChoice not implemented")
}
func (*UnimplementedWorknetProfessionServer) WorknetProfessionSalary(ctx context.Context, req *empty.Empty) (*WorknetProfessionSalaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetProfessionSalary not implemented")
}
func (*UnimplementedWorknetProfessionServer) WorknetProfessionTypeNumber(ctx context.Context, req *empty.Empty) (*WorknetProfessionChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetProfessionTypeNumber not implemented")
}
func (*UnimplementedWorknetProfessionServer) WorknetProfessionTypeSalary(ctx context.Context, req *empty.Empty) (*WorknetProfessionSalaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetProfessionTypeSalary not implemented")
}

func RegisterWorknetProfessionServer(s *grpc.Server, srv WorknetProfessionServer) {
	s.RegisterService(&_WorknetProfession_serviceDesc, srv)
}

func _WorknetProfession_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetProfessionServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetProfession/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetProfessionServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetProfession_WorknetProfessionChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetProfessionServer).WorknetProfessionChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetProfession/WorknetProfessionChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetProfessionServer).WorknetProfessionChoice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetProfession_WorknetProfessionSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetProfessionServer).WorknetProfessionSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetProfession/WorknetProfessionSalary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetProfessionServer).WorknetProfessionSalary(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetProfession_WorknetProfessionTypeNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetProfessionServer).WorknetProfessionTypeNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetProfession/WorknetProfessionTypeNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetProfessionServer).WorknetProfessionTypeNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetProfession_WorknetProfessionTypeSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetProfessionServer).WorknetProfessionTypeSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetProfession/WorknetProfessionTypeSalary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetProfessionServer).WorknetProfessionTypeSalary(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorknetProfession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.WorknetProfession",
	HandlerType: (*WorknetProfessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WorknetProfession_Ping_Handler,
		},
		{
			MethodName: "WorknetProfessionChoice",
			Handler:    _WorknetProfession_WorknetProfessionChoice_Handler,
		},
		{
			MethodName: "WorknetProfessionSalary",
			Handler:    _WorknetProfession_WorknetProfessionSalary_Handler,
		},
		{
			MethodName: "WorknetProfessionTypeNumber",
			Handler:    _WorknetProfession_WorknetProfessionTypeNumber_Handler,
		},
		{
			MethodName: "WorknetProfessionTypeSalary",
			Handler:    _WorknetProfession_WorknetProfessionTypeSalary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *WorknetProfessionChoiceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetProfessionChoiceResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetProfessionChoiceResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		for iNdEx := len(m.Number) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Number[iNdEx])
			copy(dAtA[i:], m.Number[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Number[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProfessionName) > 0 {
		for iNdEx := len(m.ProfessionName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfessionName[iNdEx])
			copy(dAtA[i:], m.ProfessionName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ProfessionName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetProfessionSalaryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetProfessionSalaryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetProfessionSalaryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Salary) > 0 {
		for iNdEx := len(m.Salary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Salary[iNdEx])
			copy(dAtA[i:], m.Salary[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Salary[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProfessionName) > 0 {
		for iNdEx := len(m.ProfessionName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfessionName[iNdEx])
			copy(dAtA[i:], m.ProfessionName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ProfessionName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorknetProfessionChoiceResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfessionName) > 0 {
		for _, s := range m.ProfessionName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Number) > 0 {
		for _, s := range m.Number {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetProfessionSalaryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfessionName) > 0 {
		for _, s := range m.ProfessionName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Salary) > 0 {
		for _, s := range m.Salary {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorknetProfessionChoiceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetProfessionChoiceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetProfessionChoiceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessionName = append(m.ProfessionName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = append(m.Number, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetProfessionSalaryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetProfessionSalaryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetProfessionSalaryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessionName = append(m.ProfessionName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salary = append(m.Salary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
