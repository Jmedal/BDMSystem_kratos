// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorknetCourseActivityResp struct {
	//激活
	Activity int64 `protobuf:"varint,1,opt,name=activity,proto3" json:"activity"`
	//未激活
	Inactivity           int64    `protobuf:"varint,2,opt,name=inactivity,proto3" json:"inactivity"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseActivityResp) Reset()         { *m = WorknetCourseActivityResp{} }
func (m *WorknetCourseActivityResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseActivityResp) ProtoMessage()    {}
func (*WorknetCourseActivityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *WorknetCourseActivityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseActivityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseActivityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseActivityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseActivityResp.Merge(m, src)
}
func (m *WorknetCourseActivityResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseActivityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseActivityResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseActivityResp proto.InternalMessageInfo

type WorknetCourseChangeReq struct {
	//时间
	Time                 []int64  `protobuf:"varint,1,rep,packed,name=time,proto3" json:"time,omitempty" form:"time" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseChangeReq) Reset()         { *m = WorknetCourseChangeReq{} }
func (m *WorknetCourseChangeReq) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseChangeReq) ProtoMessage()    {}
func (*WorknetCourseChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WorknetCourseChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseChangeReq.Merge(m, src)
}
func (m *WorknetCourseChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseChangeReq proto.InternalMessageInfo

type WorknetCourseChangeResp struct {
	//时间
	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
	//课程数量
	Course               []int64  `protobuf:"varint,2,rep,packed,name=course,proto3" json:"course"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseChangeResp) Reset()         { *m = WorknetCourseChangeResp{} }
func (m *WorknetCourseChangeResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseChangeResp) ProtoMessage()    {}
func (*WorknetCourseChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *WorknetCourseChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseChangeResp.Merge(m, src)
}
func (m *WorknetCourseChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseChangeResp proto.InternalMessageInfo

type WorknetCourseListResp struct {
	//课程
	CourseList           []*WorknetCourseListResp_WorknetCourse `protobuf:"bytes,1,rep,name=courseList,proto3" json:"courseList"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *WorknetCourseListResp) Reset()         { *m = WorknetCourseListResp{} }
func (m *WorknetCourseListResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseListResp) ProtoMessage()    {}
func (*WorknetCourseListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *WorknetCourseListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseListResp.Merge(m, src)
}
func (m *WorknetCourseListResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseListResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseListResp proto.InternalMessageInfo

//课程信息
type WorknetCourseListResp_WorknetCourse struct {
	CourseId             int64    `protobuf:"varint,1,opt,name=courseId,proto3" json:"courseId"`
	CourseName           string   `protobuf:"bytes,2,opt,name=courseName,proto3" json:"courseName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseListResp_WorknetCourse) Reset()         { *m = WorknetCourseListResp_WorknetCourse{} }
func (m *WorknetCourseListResp_WorknetCourse) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseListResp_WorknetCourse) ProtoMessage()    {}
func (*WorknetCourseListResp_WorknetCourse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 0}
}
func (m *WorknetCourseListResp_WorknetCourse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseListResp_WorknetCourse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseListResp_WorknetCourse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseListResp_WorknetCourse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseListResp_WorknetCourse.Merge(m, src)
}
func (m *WorknetCourseListResp_WorknetCourse) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseListResp_WorknetCourse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseListResp_WorknetCourse.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseListResp_WorknetCourse proto.InternalMessageInfo

type WorknetStudentChangeReq struct {
	//课程Id
	CourseId []int64 `protobuf:"varint,1,rep,packed,name=courseId,proto3" json:"courseId,omitempty" form:"courseId" validate:"required"`
	//时间
	Time                 []int64  `protobuf:"varint,2,rep,packed,name=time,proto3" json:"time,omitempty" form:"time" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetStudentChangeReq) Reset()         { *m = WorknetStudentChangeReq{} }
func (m *WorknetStudentChangeReq) String() string { return proto.CompactTextString(m) }
func (*WorknetStudentChangeReq) ProtoMessage()    {}
func (*WorknetStudentChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *WorknetStudentChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetStudentChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetStudentChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetStudentChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetStudentChangeReq.Merge(m, src)
}
func (m *WorknetStudentChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetStudentChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetStudentChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetStudentChangeReq proto.InternalMessageInfo

type WorknetStudentChangeResp struct {
	//时间
	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
	//课程学员新增
	Student              []*WorknetStudentChangeResp_WorknetCourse `protobuf:"bytes,2,rep,name=student,proto3" json:"student"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *WorknetStudentChangeResp) Reset()         { *m = WorknetStudentChangeResp{} }
func (m *WorknetStudentChangeResp) String() string { return proto.CompactTextString(m) }
func (*WorknetStudentChangeResp) ProtoMessage()    {}
func (*WorknetStudentChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *WorknetStudentChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetStudentChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetStudentChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetStudentChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetStudentChangeResp.Merge(m, src)
}
func (m *WorknetStudentChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetStudentChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetStudentChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetStudentChangeResp proto.InternalMessageInfo

type WorknetStudentChangeResp_WorknetCourse struct {
	//课程名
	CourseName string `protobuf:"bytes,1,opt,name=courseName,proto3" json:"courseName"`
	//新增用户数量
	StudentChange        []int64  `protobuf:"varint,2,rep,packed,name=studentChange,proto3" json:"studentChange"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetStudentChangeResp_WorknetCourse) Reset() {
	*m = WorknetStudentChangeResp_WorknetCourse{}
}
func (m *WorknetStudentChangeResp_WorknetCourse) String() string { return proto.CompactTextString(m) }
func (*WorknetStudentChangeResp_WorknetCourse) ProtoMessage()    {}
func (*WorknetStudentChangeResp_WorknetCourse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 0}
}
func (m *WorknetStudentChangeResp_WorknetCourse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetStudentChangeResp_WorknetCourse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetStudentChangeResp_WorknetCourse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetStudentChangeResp_WorknetCourse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetStudentChangeResp_WorknetCourse.Merge(m, src)
}
func (m *WorknetStudentChangeResp_WorknetCourse) XXX_Size() int {
	return m.Size()
}
func (m *WorknetStudentChangeResp_WorknetCourse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetStudentChangeResp_WorknetCourse.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetStudentChangeResp_WorknetCourse proto.InternalMessageInfo

type WorknetStudentFinishReq struct {
	//课程Id
	CourseId []int64 `protobuf:"varint,1,rep,packed,name=courseId,proto3" json:"courseId,omitempty" form:"courseId" validate:"required"`
	//时间
	Time                 []int64  `protobuf:"varint,2,rep,packed,name=time,proto3" json:"time,omitempty" form:"time" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetStudentFinishReq) Reset()         { *m = WorknetStudentFinishReq{} }
func (m *WorknetStudentFinishReq) String() string { return proto.CompactTextString(m) }
func (*WorknetStudentFinishReq) ProtoMessage()    {}
func (*WorknetStudentFinishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *WorknetStudentFinishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetStudentFinishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetStudentFinishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetStudentFinishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetStudentFinishReq.Merge(m, src)
}
func (m *WorknetStudentFinishReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetStudentFinishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetStudentFinishReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetStudentFinishReq proto.InternalMessageInfo

type WorknetStudentFinishResp struct {
	//课程
	CourseName []string `protobuf:"bytes,2,rep,name=courseName,proto3" json:"courseName"`
	//完成
	Finish []int64 `protobuf:"varint,3,rep,packed,name=finish,proto3" json:"finish"`
	//未完成
	UnFinish             []int64  `protobuf:"varint,4,rep,packed,name=unFinish,proto3" json:"unFinish"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetStudentFinishResp) Reset()         { *m = WorknetStudentFinishResp{} }
func (m *WorknetStudentFinishResp) String() string { return proto.CompactTextString(m) }
func (*WorknetStudentFinishResp) ProtoMessage()    {}
func (*WorknetStudentFinishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *WorknetStudentFinishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetStudentFinishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetStudentFinishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetStudentFinishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetStudentFinishResp.Merge(m, src)
}
func (m *WorknetStudentFinishResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetStudentFinishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetStudentFinishResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetStudentFinishResp proto.InternalMessageInfo

type WorknetAverageScoreListResp struct {
	//课程名
	CourseName []string `protobuf:"bytes,1,rep,name=courseName,proto3" json:"courseName"`
	//平均分
	AverageScore         []string `protobuf:"bytes,2,rep,name=averageScore,proto3" json:"averageScore"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetAverageScoreListResp) Reset()         { *m = WorknetAverageScoreListResp{} }
func (m *WorknetAverageScoreListResp) String() string { return proto.CompactTextString(m) }
func (*WorknetAverageScoreListResp) ProtoMessage()    {}
func (*WorknetAverageScoreListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *WorknetAverageScoreListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetAverageScoreListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetAverageScoreListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetAverageScoreListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetAverageScoreListResp.Merge(m, src)
}
func (m *WorknetAverageScoreListResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetAverageScoreListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetAverageScoreListResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetAverageScoreListResp proto.InternalMessageInfo

type WorknetAverageScoreSectionResp struct {
	//不同分数区间课程数量
	CourseNumber         []int64  `protobuf:"varint,1,rep,packed,name=courseNumber,proto3" json:"courseNumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetAverageScoreSectionResp) Reset()         { *m = WorknetAverageScoreSectionResp{} }
func (m *WorknetAverageScoreSectionResp) String() string { return proto.CompactTextString(m) }
func (*WorknetAverageScoreSectionResp) ProtoMessage()    {}
func (*WorknetAverageScoreSectionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *WorknetAverageScoreSectionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetAverageScoreSectionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetAverageScoreSectionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetAverageScoreSectionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetAverageScoreSectionResp.Merge(m, src)
}
func (m *WorknetAverageScoreSectionResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetAverageScoreSectionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetAverageScoreSectionResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetAverageScoreSectionResp proto.InternalMessageInfo

type WorknetCourseRankReq struct {
	//排行榜位数范围 如 1~15
	Location             []int64  `protobuf:"varint,1,rep,packed,name=location,proto3" json:"location,omitempty" form:"location" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseRankReq) Reset()         { *m = WorknetCourseRankReq{} }
func (m *WorknetCourseRankReq) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseRankReq) ProtoMessage()    {}
func (*WorknetCourseRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *WorknetCourseRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseRankReq.Merge(m, src)
}
func (m *WorknetCourseRankReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseRankReq proto.InternalMessageInfo

type WorknetCourseRankResp struct {
	//课程名
	CourseName []string `protobuf:"bytes,1,rep,name=courseName,proto3" json:"courseName"`
	//数量
	Number               []string `protobuf:"bytes,2,rep,name=number,proto3" json:"number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCourseRankResp) Reset()         { *m = WorknetCourseRankResp{} }
func (m *WorknetCourseRankResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCourseRankResp) ProtoMessage()    {}
func (*WorknetCourseRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *WorknetCourseRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCourseRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCourseRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCourseRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCourseRankResp.Merge(m, src)
}
func (m *WorknetCourseRankResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCourseRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCourseRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCourseRankResp proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorknetCourseActivityResp)(nil), "service.v1.WorknetCourseActivityResp")
	proto.RegisterType((*WorknetCourseChangeReq)(nil), "service.v1.WorknetCourseChangeReq")
	proto.RegisterType((*WorknetCourseChangeResp)(nil), "service.v1.WorknetCourseChangeResp")
	proto.RegisterType((*WorknetCourseListResp)(nil), "service.v1.WorknetCourseListResp")
	proto.RegisterType((*WorknetCourseListResp_WorknetCourse)(nil), "service.v1.WorknetCourseListResp.WorknetCourse")
	proto.RegisterType((*WorknetStudentChangeReq)(nil), "service.v1.WorknetStudentChangeReq")
	proto.RegisterType((*WorknetStudentChangeResp)(nil), "service.v1.WorknetStudentChangeResp")
	proto.RegisterType((*WorknetStudentChangeResp_WorknetCourse)(nil), "service.v1.WorknetStudentChangeResp.WorknetCourse")
	proto.RegisterType((*WorknetStudentFinishReq)(nil), "service.v1.WorknetStudentFinishReq")
	proto.RegisterType((*WorknetStudentFinishResp)(nil), "service.v1.WorknetStudentFinishResp")
	proto.RegisterType((*WorknetAverageScoreListResp)(nil), "service.v1.WorknetAverageScoreListResp")
	proto.RegisterType((*WorknetAverageScoreSectionResp)(nil), "service.v1.WorknetAverageScoreSectionResp")
	proto.RegisterType((*WorknetCourseRankReq)(nil), "service.v1.WorknetCourseRankReq")
	proto.RegisterType((*WorknetCourseRankResp)(nil), "service.v1.WorknetCourseRankResp")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 920 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xae, 0xb3, 0x61, 0xdb, 0xbc, 0x24, 0x85, 0x8e, 0xa0, 0x6c, 0x1d, 0xb4, 0x0e, 0x13, 0x50,
	0x23, 0x10, 0x8e, 0x58, 0x2a, 0x2a, 0xf5, 0x96, 0x04, 0x90, 0xf8, 0xa1, 0x0a, 0x26, 0x28, 0x88,
	0x56, 0xa8, 0x78, 0xbd, 0x93, 0xcd, 0x68, 0xb3, 0x1e, 0xc7, 0x63, 0xaf, 0xc8, 0x99, 0x33, 0x67,
	0xfa, 0x27, 0xf5, 0xc8, 0x5f, 0x60, 0x41, 0x7a, 0xf3, 0xb1, 0x07, 0xce, 0xc8, 0x33, 0xfe, 0x35,
	0x5e, 0x3b, 0x06, 0x04, 0xea, 0xc9, 0x6f, 0xbe, 0x99, 0xf9, 0xde, 0xec, 0xfb, 0x66, 0xbe, 0xb7,
	0xb0, 0xe6, 0xf8, 0xcc, 0xf6, 0x03, 0x1e, 0x72, 0x04, 0x82, 0x06, 0x0b, 0xe6, 0x52, 0x7b, 0xf1,
	0xa1, 0xf9, 0xc1, 0x94, 0x85, 0xa7, 0xd1, 0xd8, 0x76, 0xf9, 0x7c, 0x6f, 0xca, 0xa7, 0x7c, 0x4f,
	0x2e, 0x19, 0x47, 0x27, 0x72, 0x24, 0x07, 0x32, 0x52, 0x5b, 0xcd, 0xad, 0x29, 0xe7, 0xd3, 0x33,
	0x5a, 0xae, 0xa2, 0x73, 0x3f, 0xbc, 0x50, 0x93, 0x38, 0x82, 0x3b, 0xdf, 0xf1, 0x60, 0xe6, 0xd1,
	0xf0, 0x90, 0x47, 0x81, 0xa0, 0xfb, 0x6e, 0xc8, 0x16, 0x2c, 0xbc, 0x20, 0x54, 0xf8, 0x68, 0x17,
	0x6e, 0x38, 0xd9, 0x78, 0x60, 0x6c, 0x1b, 0xbb, 0xbd, 0x83, 0x8d, 0x24, 0xb6, 0x0a, 0x8c, 0x14,
	0x11, 0xb2, 0x01, 0x98, 0x57, 0xac, 0x5d, 0x91, 0x6b, 0x6f, 0x26, 0xb1, 0x55, 0x41, 0x49, 0x25,
	0xc6, 0xdf, 0xc0, 0x6d, 0x2d, 0xed, 0xe1, 0xa9, 0xe3, 0x4d, 0x29, 0xa1, 0xe7, 0xe8, 0x3e, 0xac,
	0x86, 0x6c, 0x4e, 0x07, 0xc6, 0x76, 0x6f, 0xb7, 0x77, 0xb0, 0xf3, 0x22, 0xb6, 0xac, 0x13, 0x1e,
	0xcc, 0x1f, 0xe0, 0x14, 0xc5, 0xdb, 0x0b, 0xe7, 0x8c, 0x4d, 0x9c, 0x90, 0x3e, 0xc0, 0x01, 0x3d,
	0x8f, 0x58, 0x40, 0x27, 0x98, 0xc8, 0x0d, 0xf8, 0x31, 0xbc, 0xd9, 0x48, 0x29, 0x7c, 0xf4, 0x56,
	0x85, 0x73, 0xed, 0xe0, 0x46, 0x12, 0x5b, 0x72, 0xac, 0x36, 0x22, 0x0c, 0x7d, 0x57, 0xee, 0x18,
	0xac, 0xc8, 0x9c, 0x90, 0xc4, 0x56, 0x86, 0x90, 0xec, 0x8b, 0x9f, 0x1b, 0xf0, 0x86, 0xc6, 0xfe,
	0x15, 0x13, 0xa1, 0xe4, 0x7e, 0x02, 0xe0, 0x16, 0x88, 0xcc, 0xb0, 0x3e, 0xda, 0xb3, 0x4b, 0xb5,
	0xec, 0xc6, 0x6d, 0x3a, 0xaa, 0x4a, 0x55, 0xd2, 0x90, 0x4a, 0x6c, 0x32, 0xd8, 0xd4, 0x16, 0xa7,
	0xaa, 0xa8, 0xe9, 0xcf, 0x27, 0x55, 0x55, 0x72, 0x8c, 0x14, 0x51, 0xaa, 0x8a, 0x8a, 0x1f, 0x3a,
	0x73, 0x2a, 0x55, 0x59, 0xab, 0xa6, 0x4a, 0x51, 0x52, 0x89, 0xf1, 0xaf, 0x46, 0x51, 0xc3, 0xa3,
	0x30, 0x9a, 0x50, 0x2f, 0x2c, 0x75, 0x39, 0xd4, 0xb2, 0xa6, 0x75, 0xba, 0xfb, 0x22, 0xb6, 0x76,
	0x94, 0x36, 0xf9, 0x4c, 0xb3, 0x3e, 0xe5, 0x81, 0x72, 0x71, 0x57, 0xfe, 0xa9, 0xb8, 0xbf, 0xac,
	0xc0, 0xa0, 0xf9, 0x64, 0x9d, 0xf2, 0x7e, 0x0f, 0xd7, 0x85, 0xda, 0x22, 0xd3, 0xae, 0x8f, 0x46,
	0x0d, 0xea, 0x2c, 0x91, 0xd6, 0x04, 0x5a, 0x4f, 0x62, 0x2b, 0xa7, 0x21, 0x79, 0x60, 0xfe, 0x54,
	0x97, 0x46, 0x2f, 0xb8, 0xd1, 0x55, 0x70, 0x74, 0x1f, 0x36, 0x45, 0x35, 0x73, 0x56, 0x98, 0x5b,
	0x49, 0x6c, 0xe9, 0x13, 0x44, 0x1f, 0x36, 0x28, 0xf5, 0x19, 0xf3, 0x98, 0x38, 0x7d, 0xf9, 0x4a,
	0x3d, 0x35, 0xea, 0x4a, 0xe5, 0x27, 0x13, 0xfe, 0xd2, 0x85, 0xec, 0x75, 0xd4, 0x07, 0x43, 0xff,
	0x44, 0xee, 0x1e, 0xf4, 0xca, 0xa7, 0xa9, 0x10, 0x92, 0x7d, 0xd3, 0xe7, 0x10, 0x79, 0x2a, 0xc7,
	0x60, 0x55, 0xae, 0x92, 0xcf, 0x21, 0xc7, 0x48, 0x11, 0xe1, 0x9f, 0x0d, 0xd8, 0xca, 0x8e, 0xb6,
	0xbf, 0xa0, 0x81, 0x33, 0xa5, 0x47, 0x2e, 0x0f, 0xca, 0xa7, 0x5c, 0x57, 0xaf, 0xeb, 0x74, 0xf7,
	0x60, 0xc3, 0xa9, 0xf0, 0x64, 0xbf, 0xe7, 0xb5, 0x24, 0xb6, 0x34, 0x9c, 0x68, 0x23, 0x7c, 0x0c,
	0xc3, 0x86, 0x43, 0x1c, 0x51, 0x37, 0x64, 0xdc, 0x93, 0xe7, 0xb8, 0x07, 0x1b, 0x59, 0x96, 0x68,
	0x3e, 0xa6, 0x41, 0x26, 0xa2, 0xe4, 0xad, 0xe2, 0x44, 0x1b, 0xe1, 0xc7, 0xf0, 0xba, 0x76, 0x19,
	0x89, 0xe3, 0xcd, 0xb2, 0xeb, 0x70, 0xc6, 0x5d, 0x27, 0x65, 0x5f, 0xbe, 0x0e, 0xf9, 0x4c, 0xcb,
	0x75, 0x28, 0xa6, 0x67, 0x35, 0xfb, 0x53, 0xe4, 0xff, 0xa2, 0x66, 0x18, 0xfa, 0x9e, 0xfa, 0x55,
	0xaa, 0x5a, 0x52, 0x51, 0x85, 0x90, 0xec, 0x8b, 0x3f, 0x81, 0x9b, 0xc7, 0x34, 0x60, 0x27, 0x17,
	0xdf, 0xf2, 0x19, 0xf5, 0xd2, 0xdf, 0x30, 0x82, 0x75, 0xc7, 0x75, 0xa9, 0x10, 0x12, 0xc9, 0x1e,
	0x96, 0x2a, 0xb4, 0x84, 0x9f, 0x84, 0x72, 0x65, 0x75, 0x11, 0x1e, 0xc3, 0xab, 0x1a, 0x8b, 0xf0,
	0xd3, 0xe4, 0x91, 0xa0, 0x41, 0xe1, 0x9b, 0x32, 0xb9, 0x42, 0x48, 0xf6, 0x45, 0xef, 0xc3, 0x5a,
	0xe0, 0x78, 0x13, 0x3e, 0xff, 0x92, 0x5e, 0x64, 0x96, 0xb9, 0x99, 0xc4, 0x56, 0x09, 0x92, 0x32,
	0x1c, 0xfd, 0x79, 0xbd, 0xee, 0x00, 0x1f, 0xc3, 0xea, 0xd7, 0xcc, 0x9b, 0xa2, 0xdb, 0xb6, 0xea,
	0xba, 0x76, 0xde, 0x75, 0xed, 0x4f, 0xd3, 0xae, 0x6b, 0xb6, 0xe0, 0xe8, 0xb8, 0x56, 0xe0, 0xbc,
	0x0f, 0xb7, 0x12, 0xbd, 0xdb, 0xda, 0x63, 0xb4, 0x16, 0x3e, 0xa9, 0xf5, 0x77, 0x75, 0x59, 0x94,
	0x8b, 0x20, 0xdc, 0xca, 0x51, 0xf8, 0xbe, 0xb9, 0xd3, 0xb9, 0x46, 0xf8, 0xe8, 0x21, 0xdc, 0x5a,
	0x6a, 0x73, 0xad, 0x27, 0x7f, 0xbb, 0xb3, 0x3b, 0x22, 0xa7, 0xb8, 0xcb, 0x9a, 0x31, 0xa3, 0x9d,
	0x6e, 0xeb, 0x3e, 0x37, 0xdf, 0xf9, 0x3b, 0xfe, 0xbe, 0x9c, 0x42, 0x99, 0xc4, 0x55, 0x29, 0x0a,
	0x8b, 0xbd, 0x2a, 0x45, 0xc5, 0xed, 0x1e, 0x15, 0x1e, 0x5d, 0xb7, 0x9b, 0xd6, 0xda, 0xdc, 0x6d,
	0x20, 0x6e, 0xf4, 0xaa, 0x1f, 0xc1, 0x6c, 0x77, 0x91, 0x56, 0xfa, 0xf7, 0x3a, 0xe8, 0xab, 0x2e,
	0xf4, 0x43, 0xed, 0x2f, 0xda, 0x51, 0xe8, 0x04, 0x22, 0x7d, 0xf7, 0x68, 0xbb, 0x55, 0xc0, 0xcc,
	0x73, 0xae, 0x90, 0xb8, 0x30, 0x8e, 0x3a, 0xfd, 0xe1, 0x19, 0x73, 0x67, 0xff, 0x1f, 0xfd, 0x31,
	0x9b, 0x50, 0xfe, 0x9f, 0xd1, 0x8f, 0xbe, 0x80, 0x57, 0xa4, 0xad, 0xa0, 0x7d, 0xe8, 0x2b, 0x97,
	0x41, 0x66, 0x75, 0x97, 0xee, 0x5f, 0xe6, 0x56, 0xeb, 0x9c, 0xf0, 0x0f, 0xee, 0x3c, 0xfb, 0x63,
	0x78, 0xed, 0xd9, 0xe5, 0xd0, 0xf8, 0xed, 0x72, 0x68, 0xfc, 0x7e, 0x39, 0x34, 0x9e, 0x3e, 0x1f,
	0x5e, 0x7b, 0xd4, 0x73, 0x7c, 0x36, 0xee, 0x4b, 0xfd, 0x3e, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0xde, 0x19, 0x95, 0x09, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorknetCourseClient is the client API for WorknetCourse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorknetCourseClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	WorknetCourseActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCourseActivityResp, error)
	// `method:"POST"`
	WorknetCourseNumberChange(ctx context.Context, in *WorknetCourseChangeReq, opts ...grpc.CallOption) (*WorknetCourseChangeResp, error)
	// `method:"POST"`
	WorknetCourseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCourseListResp, error)
	// `method:"POST"`
	WorknetStudentChange(ctx context.Context, in *WorknetStudentChangeReq, opts ...grpc.CallOption) (*WorknetStudentChangeResp, error)
	// `method:"POST"`
	WorknetStudentFinish(ctx context.Context, in *WorknetStudentFinishReq, opts ...grpc.CallOption) (*WorknetStudentFinishResp, error)
	// `method:"POST"`
	WorknetAverageScoreList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetAverageScoreListResp, error)
	// `method:"POST"`
	WorknetAverageScoreSection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetAverageScoreSectionResp, error)
	// `method:"POST"`
	WorknetCourseStarsRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error)
	// `method:"POST"`
	WorknetCourseClickRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error)
	// `method:"POST"`
	WorknetCourseVideoRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error)
}

type worknetCourseClient struct {
	cc *grpc.ClientConn
}

func NewWorknetCourseClient(cc *grpc.ClientConn) WorknetCourseClient {
	return &worknetCourseClient{cc}
}

func (c *worknetCourseClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCourseActivityResp, error) {
	out := new(WorknetCourseActivityResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseNumberChange(ctx context.Context, in *WorknetCourseChangeReq, opts ...grpc.CallOption) (*WorknetCourseChangeResp, error) {
	out := new(WorknetCourseChangeResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseNumberChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCourseListResp, error) {
	out := new(WorknetCourseListResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetStudentChange(ctx context.Context, in *WorknetStudentChangeReq, opts ...grpc.CallOption) (*WorknetStudentChangeResp, error) {
	out := new(WorknetStudentChangeResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetStudentChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetStudentFinish(ctx context.Context, in *WorknetStudentFinishReq, opts ...grpc.CallOption) (*WorknetStudentFinishResp, error) {
	out := new(WorknetStudentFinishResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetStudentFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetAverageScoreList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetAverageScoreListResp, error) {
	out := new(WorknetAverageScoreListResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetAverageScoreList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetAverageScoreSection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetAverageScoreSectionResp, error) {
	out := new(WorknetAverageScoreSectionResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetAverageScoreSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseStarsRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error) {
	out := new(WorknetCourseRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseStarsRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseClickRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error) {
	out := new(WorknetCourseRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseClickRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCourseClient) WorknetCourseVideoRank(ctx context.Context, in *WorknetCourseRankReq, opts ...grpc.CallOption) (*WorknetCourseRankResp, error) {
	out := new(WorknetCourseRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCourse/WorknetCourseVideoRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorknetCourseServer is the server API for WorknetCourse service.
type WorknetCourseServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	WorknetCourseActivity(context.Context, *empty.Empty) (*WorknetCourseActivityResp, error)
	// `method:"POST"`
	WorknetCourseNumberChange(context.Context, *WorknetCourseChangeReq) (*WorknetCourseChangeResp, error)
	// `method:"POST"`
	WorknetCourseList(context.Context, *empty.Empty) (*WorknetCourseListResp, error)
	// `method:"POST"`
	WorknetStudentChange(context.Context, *WorknetStudentChangeReq) (*WorknetStudentChangeResp, error)
	// `method:"POST"`
	WorknetStudentFinish(context.Context, *WorknetStudentFinishReq) (*WorknetStudentFinishResp, error)
	// `method:"POST"`
	WorknetAverageScoreList(context.Context, *empty.Empty) (*WorknetAverageScoreListResp, error)
	// `method:"POST"`
	WorknetAverageScoreSection(context.Context, *empty.Empty) (*WorknetAverageScoreSectionResp, error)
	// `method:"POST"`
	WorknetCourseStarsRank(context.Context, *WorknetCourseRankReq) (*WorknetCourseRankResp, error)
	// `method:"POST"`
	WorknetCourseClickRank(context.Context, *WorknetCourseRankReq) (*WorknetCourseRankResp, error)
	// `method:"POST"`
	WorknetCourseVideoRank(context.Context, *WorknetCourseRankReq) (*WorknetCourseRankResp, error)
}

// UnimplementedWorknetCourseServer can be embedded to have forward compatible implementations.
type UnimplementedWorknetCourseServer struct {
}

func (*UnimplementedWorknetCourseServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseActivity(ctx context.Context, req *empty.Empty) (*WorknetCourseActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseActivity not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseNumberChange(ctx context.Context, req *WorknetCourseChangeReq) (*WorknetCourseChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseNumberChange not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseList(ctx context.Context, req *empty.Empty) (*WorknetCourseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseList not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetStudentChange(ctx context.Context, req *WorknetStudentChangeReq) (*WorknetStudentChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetStudentChange not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetStudentFinish(ctx context.Context, req *WorknetStudentFinishReq) (*WorknetStudentFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetStudentFinish not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetAverageScoreList(ctx context.Context, req *empty.Empty) (*WorknetAverageScoreListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetAverageScoreList not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetAverageScoreSection(ctx context.Context, req *empty.Empty) (*WorknetAverageScoreSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetAverageScoreSection not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseStarsRank(ctx context.Context, req *WorknetCourseRankReq) (*WorknetCourseRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseStarsRank not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseClickRank(ctx context.Context, req *WorknetCourseRankReq) (*WorknetCourseRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseClickRank not implemented")
}
func (*UnimplementedWorknetCourseServer) WorknetCourseVideoRank(ctx context.Context, req *WorknetCourseRankReq) (*WorknetCourseRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCourseVideoRank not implemented")
}

func RegisterWorknetCourseServer(s *grpc.Server, srv WorknetCourseServer) {
	s.RegisterService(&_WorknetCourse_serviceDesc, srv)
}

func _WorknetCourse_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseActivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseNumberChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetCourseChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseNumberChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseNumberChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseNumberChange(ctx, req.(*WorknetCourseChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetStudentChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetStudentChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetStudentChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetStudentChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetStudentChange(ctx, req.(*WorknetStudentChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetStudentFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetStudentFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetStudentFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetStudentFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetStudentFinish(ctx, req.(*WorknetStudentFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetAverageScoreList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetAverageScoreList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetAverageScoreList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetAverageScoreList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetAverageScoreSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetAverageScoreSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetAverageScoreSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetAverageScoreSection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseStarsRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetCourseRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseStarsRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseStarsRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseStarsRank(ctx, req.(*WorknetCourseRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseClickRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetCourseRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseClickRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseClickRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseClickRank(ctx, req.(*WorknetCourseRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCourse_WorknetCourseVideoRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetCourseRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCourseServer).WorknetCourseVideoRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCourse/WorknetCourseVideoRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCourseServer).WorknetCourseVideoRank(ctx, req.(*WorknetCourseRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorknetCourse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.WorknetCourse",
	HandlerType: (*WorknetCourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WorknetCourse_Ping_Handler,
		},
		{
			MethodName: "WorknetCourseActivity",
			Handler:    _WorknetCourse_WorknetCourseActivity_Handler,
		},
		{
			MethodName: "WorknetCourseNumberChange",
			Handler:    _WorknetCourse_WorknetCourseNumberChange_Handler,
		},
		{
			MethodName: "WorknetCourseList",
			Handler:    _WorknetCourse_WorknetCourseList_Handler,
		},
		{
			MethodName: "WorknetStudentChange",
			Handler:    _WorknetCourse_WorknetStudentChange_Handler,
		},
		{
			MethodName: "WorknetStudentFinish",
			Handler:    _WorknetCourse_WorknetStudentFinish_Handler,
		},
		{
			MethodName: "WorknetAverageScoreList",
			Handler:    _WorknetCourse_WorknetAverageScoreList_Handler,
		},
		{
			MethodName: "WorknetAverageScoreSection",
			Handler:    _WorknetCourse_WorknetAverageScoreSection_Handler,
		},
		{
			MethodName: "WorknetCourseStarsRank",
			Handler:    _WorknetCourse_WorknetCourseStarsRank_Handler,
		},
		{
			MethodName: "WorknetCourseClickRank",
			Handler:    _WorknetCourse_WorknetCourseClickRank_Handler,
		},
		{
			MethodName: "WorknetCourseVideoRank",
			Handler:    _WorknetCourse_WorknetCourseVideoRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *WorknetCourseActivityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseActivityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseActivityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Inactivity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Inactivity))
		i--
		dAtA[i] = 0x10
	}
	if m.Activity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Activity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseChangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseChangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA2 := make([]byte, len(m.Time)*10)
		var j1 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Course) > 0 {
		dAtA4 := make([]byte, len(m.Course)*10)
		var j3 int
		for _, num1 := range m.Course {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Time) > 0 {
		for iNdEx := len(m.Time) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Time[iNdEx])
			copy(dAtA[i:], m.Time[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Time[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CourseList) > 0 {
		for iNdEx := len(m.CourseList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CourseList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseListResp_WorknetCourse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseListResp_WorknetCourse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseListResp_WorknetCourse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CourseName) > 0 {
		i -= len(m.CourseName)
		copy(dAtA[i:], m.CourseName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CourseName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CourseId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CourseId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetStudentChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetStudentChangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetStudentChangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA6 := make([]byte, len(m.Time)*10)
		var j5 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseId) > 0 {
		dAtA8 := make([]byte, len(m.CourseId)*10)
		var j7 int
		for _, num1 := range m.CourseId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetStudentChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetStudentChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetStudentChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Student) > 0 {
		for iNdEx := len(m.Student) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Student[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Time) > 0 {
		for iNdEx := len(m.Time) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Time[iNdEx])
			copy(dAtA[i:], m.Time[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Time[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetStudentChangeResp_WorknetCourse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetStudentChangeResp_WorknetCourse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetStudentChangeResp_WorknetCourse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StudentChange) > 0 {
		dAtA10 := make([]byte, len(m.StudentChange)*10)
		var j9 int
		for _, num1 := range m.StudentChange {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseName) > 0 {
		i -= len(m.CourseName)
		copy(dAtA[i:], m.CourseName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CourseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetStudentFinishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetStudentFinishReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetStudentFinishReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA12 := make([]byte, len(m.Time)*10)
		var j11 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintApi(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseId) > 0 {
		dAtA14 := make([]byte, len(m.CourseId)*10)
		var j13 int
		for _, num1 := range m.CourseId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetStudentFinishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetStudentFinishResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetStudentFinishResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnFinish) > 0 {
		dAtA16 := make([]byte, len(m.UnFinish)*10)
		var j15 int
		for _, num1 := range m.UnFinish {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Finish) > 0 {
		dAtA18 := make([]byte, len(m.Finish)*10)
		var j17 int
		for _, num1 := range m.Finish {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintApi(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseName) > 0 {
		for iNdEx := len(m.CourseName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseName[iNdEx])
			copy(dAtA[i:], m.CourseName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CourseName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetAverageScoreListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetAverageScoreListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetAverageScoreListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AverageScore) > 0 {
		for iNdEx := len(m.AverageScore) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AverageScore[iNdEx])
			copy(dAtA[i:], m.AverageScore[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.AverageScore[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CourseName) > 0 {
		for iNdEx := len(m.CourseName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseName[iNdEx])
			copy(dAtA[i:], m.CourseName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CourseName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetAverageScoreSectionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetAverageScoreSectionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetAverageScoreSectionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CourseNumber) > 0 {
		dAtA20 := make([]byte, len(m.CourseNumber)*10)
		var j19 int
		for _, num1 := range m.CourseNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintApi(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseRankReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseRankReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		dAtA22 := make([]byte, len(m.Location)*10)
		var j21 int
		for _, num1 := range m.Location {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintApi(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCourseRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCourseRankResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCourseRankResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		for iNdEx := len(m.Number) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Number[iNdEx])
			copy(dAtA[i:], m.Number[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Number[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CourseName) > 0 {
		for iNdEx := len(m.CourseName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseName[iNdEx])
			copy(dAtA[i:], m.CourseName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CourseName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorknetCourseActivityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Activity != 0 {
		n += 1 + sovApi(uint64(m.Activity))
	}
	if m.Inactivity != 0 {
		n += 1 + sovApi(uint64(m.Inactivity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		for _, s := range m.Time {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Course) > 0 {
		l = 0
		for _, e := range m.Course {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseList) > 0 {
		for _, e := range m.CourseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseListResp_WorknetCourse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CourseId != 0 {
		n += 1 + sovApi(uint64(m.CourseId))
	}
	l = len(m.CourseName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetStudentChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseId) > 0 {
		l = 0
		for _, e := range m.CourseId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetStudentChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		for _, s := range m.Time {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Student) > 0 {
		for _, e := range m.Student {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetStudentChangeResp_WorknetCourse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CourseName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.StudentChange) > 0 {
		l = 0
		for _, e := range m.StudentChange {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetStudentFinishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseId) > 0 {
		l = 0
		for _, e := range m.CourseId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetStudentFinishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseName) > 0 {
		for _, s := range m.CourseName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Finish) > 0 {
		l = 0
		for _, e := range m.Finish {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.UnFinish) > 0 {
		l = 0
		for _, e := range m.UnFinish {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetAverageScoreListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseName) > 0 {
		for _, s := range m.CourseName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.AverageScore) > 0 {
		for _, s := range m.AverageScore {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetAverageScoreSectionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseNumber) > 0 {
		l = 0
		for _, e := range m.CourseNumber {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseRankReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Location) > 0 {
		l = 0
		for _, e := range m.Location {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCourseRankResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseName) > 0 {
		for _, s := range m.CourseName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Number) > 0 {
		for _, s := range m.Number {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorknetCourseActivityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseActivityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseActivityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactivity", wireType)
			}
			m.Inactivity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inactivity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Course = append(m.Course, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Course) == 0 {
					m.Course = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Course = append(m.Course, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseList = append(m.CourseList, &WorknetCourseListResp_WorknetCourse{})
			if err := m.CourseList[len(m.CourseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseListResp_WorknetCourse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			m.CourseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetStudentChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetStudentChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetStudentChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CourseId = append(m.CourseId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CourseId) == 0 {
					m.CourseId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CourseId = append(m.CourseId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetStudentChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetStudentChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetStudentChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = append(m.Student, &WorknetStudentChangeResp_WorknetCourse{})
			if err := m.Student[len(m.Student)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetStudentChangeResp_WorknetCourse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StudentChange = append(m.StudentChange, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StudentChange) == 0 {
					m.StudentChange = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StudentChange = append(m.StudentChange, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentChange", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetStudentFinishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetStudentFinishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetStudentFinishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CourseId = append(m.CourseId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CourseId) == 0 {
					m.CourseId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CourseId = append(m.CourseId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetStudentFinishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetStudentFinishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetStudentFinishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseName = append(m.CourseName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Finish = append(m.Finish, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Finish) == 0 {
					m.Finish = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Finish = append(m.Finish, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Finish", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnFinish = append(m.UnFinish, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnFinish) == 0 {
					m.UnFinish = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnFinish = append(m.UnFinish, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnFinish", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetAverageScoreListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetAverageScoreListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetAverageScoreListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseName = append(m.CourseName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AverageScore = append(m.AverageScore, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetAverageScoreSectionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetAverageScoreSectionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetAverageScoreSectionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CourseNumber = append(m.CourseNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CourseNumber) == 0 {
					m.CourseNumber = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CourseNumber = append(m.CourseNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseNumber", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Location = append(m.Location, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Location) == 0 {
					m.Location = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Location = append(m.Location, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCourseRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCourseRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCourseRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseName = append(m.CourseName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = append(m.Number, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
