// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorknetLocationListResp struct {
	LocationList         []*WorknetLocationListResp_LocationInfo `protobuf:"bytes,1,rep,name=locationList,proto3" json:"locationList"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *WorknetLocationListResp) Reset()         { *m = WorknetLocationListResp{} }
func (m *WorknetLocationListResp) String() string { return proto.CompactTextString(m) }
func (*WorknetLocationListResp) ProtoMessage()    {}
func (*WorknetLocationListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *WorknetLocationListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetLocationListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetLocationListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetLocationListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetLocationListResp.Merge(m, src)
}
func (m *WorknetLocationListResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetLocationListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetLocationListResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetLocationListResp proto.InternalMessageInfo

type WorknetLocationListResp_LocationInfo struct {
	CityName             string   `protobuf:"bytes,1,opt,name=cityName,proto3" json:"name"`
	CompanyNumber        int64    `protobuf:"varint,2,opt,name=companyNumber,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetLocationListResp_LocationInfo) Reset()         { *m = WorknetLocationListResp_LocationInfo{} }
func (m *WorknetLocationListResp_LocationInfo) String() string { return proto.CompactTextString(m) }
func (*WorknetLocationListResp_LocationInfo) ProtoMessage()    {}
func (*WorknetLocationListResp_LocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}
func (m *WorknetLocationListResp_LocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetLocationListResp_LocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetLocationListResp_LocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetLocationListResp_LocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetLocationListResp_LocationInfo.Merge(m, src)
}
func (m *WorknetLocationListResp_LocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorknetLocationListResp_LocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetLocationListResp_LocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetLocationListResp_LocationInfo proto.InternalMessageInfo

type WorknetCompanyListResp struct {
	//公司
	CompanyList          []*WorknetCompanyListResp_WorknetCompany `protobuf:"bytes,1,rep,name=companyList,proto3" json:"companyList"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *WorknetCompanyListResp) Reset()         { *m = WorknetCompanyListResp{} }
func (m *WorknetCompanyListResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCompanyListResp) ProtoMessage()    {}
func (*WorknetCompanyListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WorknetCompanyListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCompanyListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCompanyListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCompanyListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCompanyListResp.Merge(m, src)
}
func (m *WorknetCompanyListResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCompanyListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCompanyListResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCompanyListResp proto.InternalMessageInfo

//公司信息
type WorknetCompanyListResp_WorknetCompany struct {
	CompanyId            int64    `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName          string   `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCompanyListResp_WorknetCompany) Reset()         { *m = WorknetCompanyListResp_WorknetCompany{} }
func (m *WorknetCompanyListResp_WorknetCompany) String() string { return proto.CompactTextString(m) }
func (*WorknetCompanyListResp_WorknetCompany) ProtoMessage()    {}
func (*WorknetCompanyListResp_WorknetCompany) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 0}
}
func (m *WorknetCompanyListResp_WorknetCompany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCompanyListResp_WorknetCompany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCompanyListResp_WorknetCompany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCompanyListResp_WorknetCompany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCompanyListResp_WorknetCompany.Merge(m, src)
}
func (m *WorknetCompanyListResp_WorknetCompany) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCompanyListResp_WorknetCompany) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCompanyListResp_WorknetCompany.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCompanyListResp_WorknetCompany proto.InternalMessageInfo

type WorknetProfessionChangeReq struct {
	//公司Id
	CompanyId []int64 `protobuf:"varint,1,rep,packed,name=companyId,proto3" json:"companyId,omitempty" form:"companyId" validate:"required"`
	//时间
	Time                 []int64  `protobuf:"varint,2,rep,packed,name=time,proto3" json:"time,omitempty" form:"time" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetProfessionChangeReq) Reset()         { *m = WorknetProfessionChangeReq{} }
func (m *WorknetProfessionChangeReq) String() string { return proto.CompactTextString(m) }
func (*WorknetProfessionChangeReq) ProtoMessage()    {}
func (*WorknetProfessionChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *WorknetProfessionChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetProfessionChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetProfessionChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetProfessionChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetProfessionChangeReq.Merge(m, src)
}
func (m *WorknetProfessionChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetProfessionChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetProfessionChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetProfessionChangeReq proto.InternalMessageInfo

type WorknetProfessionChangeResp struct {
	//时间
	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
	//公司招聘新增
	Profession           []*WorknetProfessionChangeResp_WorknetProfession `protobuf:"bytes,2,rep,name=profession,proto3" json:"profession"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *WorknetProfessionChangeResp) Reset()         { *m = WorknetProfessionChangeResp{} }
func (m *WorknetProfessionChangeResp) String() string { return proto.CompactTextString(m) }
func (*WorknetProfessionChangeResp) ProtoMessage()    {}
func (*WorknetProfessionChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *WorknetProfessionChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetProfessionChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetProfessionChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetProfessionChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetProfessionChangeResp.Merge(m, src)
}
func (m *WorknetProfessionChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetProfessionChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetProfessionChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetProfessionChangeResp proto.InternalMessageInfo

type WorknetProfessionChangeResp_WorknetProfession struct {
	//公司名
	CompanyName string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	//新增招聘数量
	ProfessionChange     []int64  `protobuf:"varint,2,rep,packed,name=professionChange,proto3" json:"professionChange"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetProfessionChangeResp_WorknetProfession) Reset() {
	*m = WorknetProfessionChangeResp_WorknetProfession{}
}
func (m *WorknetProfessionChangeResp_WorknetProfession) String() string {
	return proto.CompactTextString(m)
}
func (*WorknetProfessionChangeResp_WorknetProfession) ProtoMessage() {}
func (*WorknetProfessionChangeResp_WorknetProfession) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 0}
}
func (m *WorknetProfessionChangeResp_WorknetProfession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetProfessionChangeResp_WorknetProfession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetProfessionChangeResp_WorknetProfession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetProfessionChangeResp_WorknetProfession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetProfessionChangeResp_WorknetProfession.Merge(m, src)
}
func (m *WorknetProfessionChangeResp_WorknetProfession) XXX_Size() int {
	return m.Size()
}
func (m *WorknetProfessionChangeResp_WorknetProfession) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetProfessionChangeResp_WorknetProfession.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetProfessionChangeResp_WorknetProfession proto.InternalMessageInfo

type WorknetCompanyRankResp struct {
	//公司名
	CompanyName []string `protobuf:"bytes,1,rep,name=companyName,proto3" json:"companyName"`
	//数量
	Number               []int64  `protobuf:"varint,2,rep,packed,name=number,proto3" json:"number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCompanyRankResp) Reset()         { *m = WorknetCompanyRankResp{} }
func (m *WorknetCompanyRankResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCompanyRankResp) ProtoMessage()    {}
func (*WorknetCompanyRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *WorknetCompanyRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCompanyRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCompanyRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCompanyRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCompanyRankResp.Merge(m, src)
}
func (m *WorknetCompanyRankResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCompanyRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCompanyRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCompanyRankResp proto.InternalMessageInfo

type WorknetCvStatusNumberResp struct {
	//公司简历状态数量
	StatusNumber         []int64  `protobuf:"varint,1,rep,packed,name=statusNumber,proto3" json:"statusNumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCvStatusNumberResp) Reset()         { *m = WorknetCvStatusNumberResp{} }
func (m *WorknetCvStatusNumberResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCvStatusNumberResp) ProtoMessage()    {}
func (*WorknetCvStatusNumberResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *WorknetCvStatusNumberResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCvStatusNumberResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCvStatusNumberResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCvStatusNumberResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCvStatusNumberResp.Merge(m, src)
}
func (m *WorknetCvStatusNumberResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCvStatusNumberResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCvStatusNumberResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCvStatusNumberResp proto.InternalMessageInfo

type WorknetContestChangeReq struct {
	//公司Id
	CompanyId []int64 `protobuf:"varint,1,rep,packed,name=companyId,proto3" json:"companyId,omitempty" form:"companyId" validate:"required"`
	//时间
	Time                 []int64  `protobuf:"varint,2,rep,packed,name=time,proto3" json:"time,omitempty" form:"time" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetContestChangeReq) Reset()         { *m = WorknetContestChangeReq{} }
func (m *WorknetContestChangeReq) String() string { return proto.CompactTextString(m) }
func (*WorknetContestChangeReq) ProtoMessage()    {}
func (*WorknetContestChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *WorknetContestChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetContestChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetContestChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetContestChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetContestChangeReq.Merge(m, src)
}
func (m *WorknetContestChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *WorknetContestChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetContestChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetContestChangeReq proto.InternalMessageInfo

type WorknetContestChangeResp struct {
	//时间
	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
	//公司招聘新增
	Contest              []*WorknetContestChangeResp_WorknetContest `protobuf:"bytes,2,rep,name=contest,proto3" json:"contest"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *WorknetContestChangeResp) Reset()         { *m = WorknetContestChangeResp{} }
func (m *WorknetContestChangeResp) String() string { return proto.CompactTextString(m) }
func (*WorknetContestChangeResp) ProtoMessage()    {}
func (*WorknetContestChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *WorknetContestChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetContestChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetContestChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetContestChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetContestChangeResp.Merge(m, src)
}
func (m *WorknetContestChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetContestChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetContestChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetContestChangeResp proto.InternalMessageInfo

type WorknetContestChangeResp_WorknetContest struct {
	//公司名
	CompanyName string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	//新增笔试数量
	ContestChange        []int64  `protobuf:"varint,2,rep,packed,name=contestChange,proto3" json:"contestChange"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetContestChangeResp_WorknetContest) Reset() {
	*m = WorknetContestChangeResp_WorknetContest{}
}
func (m *WorknetContestChangeResp_WorknetContest) String() string { return proto.CompactTextString(m) }
func (*WorknetContestChangeResp_WorknetContest) ProtoMessage()    {}
func (*WorknetContestChangeResp_WorknetContest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7, 0}
}
func (m *WorknetContestChangeResp_WorknetContest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetContestChangeResp_WorknetContest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetContestChangeResp_WorknetContest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetContestChangeResp_WorknetContest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetContestChangeResp_WorknetContest.Merge(m, src)
}
func (m *WorknetContestChangeResp_WorknetContest) XXX_Size() int {
	return m.Size()
}
func (m *WorknetContestChangeResp_WorknetContest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetContestChangeResp_WorknetContest.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetContestChangeResp_WorknetContest proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorknetLocationListResp)(nil), "service.v1.WorknetLocationListResp")
	proto.RegisterType((*WorknetLocationListResp_LocationInfo)(nil), "service.v1.WorknetLocationListResp.LocationInfo")
	proto.RegisterType((*WorknetCompanyListResp)(nil), "service.v1.WorknetCompanyListResp")
	proto.RegisterType((*WorknetCompanyListResp_WorknetCompany)(nil), "service.v1.WorknetCompanyListResp.WorknetCompany")
	proto.RegisterType((*WorknetProfessionChangeReq)(nil), "service.v1.WorknetProfessionChangeReq")
	proto.RegisterType((*WorknetProfessionChangeResp)(nil), "service.v1.WorknetProfessionChangeResp")
	proto.RegisterType((*WorknetProfessionChangeResp_WorknetProfession)(nil), "service.v1.WorknetProfessionChangeResp.WorknetProfession")
	proto.RegisterType((*WorknetCompanyRankResp)(nil), "service.v1.WorknetCompanyRankResp")
	proto.RegisterType((*WorknetCvStatusNumberResp)(nil), "service.v1.WorknetCvStatusNumberResp")
	proto.RegisterType((*WorknetContestChangeReq)(nil), "service.v1.WorknetContestChangeReq")
	proto.RegisterType((*WorknetContestChangeResp)(nil), "service.v1.WorknetContestChangeResp")
	proto.RegisterType((*WorknetContestChangeResp_WorknetContest)(nil), "service.v1.WorknetContestChangeResp.WorknetContest")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xaf, 0x37, 0xdb, 0x6d, 0xf3, 0xb2, 0xdd, 0xb6, 0x03, 0x94, 0xd4, 0x0b, 0x71, 0xe4, 0x5d,
	0x20, 0x12, 0xc2, 0xcb, 0xa6, 0x88, 0x8a, 0x9e, 0xa8, 0x03, 0x48, 0x85, 0xaa, 0xda, 0x0e, 0x68,
	0x51, 0xcb, 0x01, 0x39, 0xce, 0xc4, 0x6b, 0x25, 0xf6, 0x38, 0xb6, 0x13, 0x29, 0x12, 0x1f, 0x80,
	0x33, 0x27, 0x84, 0xc4, 0x87, 0xe0, 0x5b, 0xf4, 0xc8, 0x27, 0xb0, 0xe8, 0x72, 0x41, 0x3e, 0xa1,
	0x7e, 0x02, 0xe4, 0xf1, 0xc4, 0x19, 0xff, 0x89, 0x12, 0x55, 0x39, 0x70, 0xb2, 0xdf, 0xef, 0xcd,
	0xfb, 0xbd, 0x37, 0x6f, 0xde, 0xfc, 0x06, 0xea, 0x86, 0x67, 0x6b, 0x9e, 0x4f, 0x43, 0x8a, 0x20,
	0x20, 0xfe, 0xcc, 0x36, 0x89, 0x36, 0x3b, 0x95, 0x3f, 0xb2, 0xec, 0xf0, 0x62, 0xda, 0xd7, 0x4c,
	0xea, 0x9c, 0x58, 0xd4, 0xa2, 0x27, 0x6c, 0x49, 0x7f, 0x3a, 0x64, 0x16, 0x33, 0xd8, 0x5f, 0x1a,
	0x2a, 0x1f, 0x5a, 0x94, 0x5a, 0x63, 0xb2, 0x5c, 0x45, 0x1c, 0x2f, 0x9c, 0xa7, 0x4e, 0xf5, 0x1f,
	0x09, 0xde, 0xfe, 0x9e, 0xfa, 0x23, 0x97, 0x84, 0x8f, 0xa9, 0x69, 0x84, 0x36, 0x75, 0x1f, 0xdb,
	0x41, 0x88, 0x49, 0xe0, 0xa1, 0x21, 0xec, 0x8f, 0x05, 0xac, 0x29, 0xb5, 0x6b, 0x9d, 0x46, 0xf7,
	0x63, 0x6d, 0x59, 0x8a, 0xb6, 0x22, 0x54, 0x5b, 0x00, 0x8f, 0xdc, 0x21, 0xd5, 0x6f, 0xc5, 0x91,
	0x92, 0x63, 0xc2, 0x39, 0x4b, 0x26, 0xb0, 0x2f, 0xae, 0x47, 0xc7, 0x70, 0xdd, 0xb4, 0xc3, 0xf9,
	0x13, 0xc3, 0x21, 0x4d, 0xa9, 0x2d, 0x75, 0xea, 0xfa, 0xf5, 0x38, 0x52, 0x76, 0x5d, 0xc3, 0x21,
	0x38, 0xf3, 0xa0, 0x13, 0xb8, 0x61, 0x52, 0xc7, 0x33, 0xdc, 0xf9, 0x93, 0xa9, 0xd3, 0x27, 0x7e,
	0x73, 0xa7, 0x2d, 0x75, 0x6a, 0x7a, 0x3d, 0x8e, 0x94, 0xab, 0x33, 0x63, 0x3c, 0x25, 0x38, 0xef,
	0x57, 0xff, 0x95, 0xe0, 0x0e, 0xaf, 0xb7, 0x97, 0x3a, 0xb2, 0x9d, 0x0e, 0xa0, 0x61, 0x2e, 0x21,
	0xbe, 0xd1, 0xd3, 0x8a, 0x8d, 0x16, 0x02, 0x0b, 0xb0, 0x7e, 0x33, 0x8e, 0x14, 0x91, 0x09, 0x8b,
	0x86, 0xec, 0xc1, 0x41, 0x7e, 0x3d, 0xfa, 0x10, 0xea, 0x7c, 0xc1, 0xa3, 0x01, 0xdb, 0x6a, 0x4d,
	0xbf, 0x11, 0x47, 0xca, 0x12, 0xc4, 0xcb, 0x5f, 0x74, 0x9a, 0x15, 0xc9, 0x3a, 0xb3, 0xc3, 0x3a,
	0x23, 0x66, 0x4c, 0x60, 0x2c, 0x1a, 0xea, 0xef, 0x12, 0xc8, 0x3c, 0xe5, 0x99, 0x4f, 0x87, 0x24,
	0x08, 0x6c, 0xea, 0xf6, 0x2e, 0x0c, 0xd7, 0x22, 0x98, 0x4c, 0xd0, 0x57, 0xf9, 0xf4, 0xb5, 0x4e,
	0x4d, 0xef, 0xbc, 0x8a, 0x94, 0xe3, 0x21, 0xf5, 0x9d, 0x07, 0x6a, 0xe6, 0x52, 0xdb, 0x33, 0x63,
	0x6c, 0x0f, 0x8c, 0x90, 0x3c, 0x50, 0x7d, 0x32, 0x99, 0xda, 0x3e, 0x19, 0xa8, 0x62, 0x65, 0xf7,
	0x61, 0x37, 0xb4, 0x59, 0x49, 0x09, 0xc5, 0xd1, 0xab, 0x48, 0x51, 0x52, 0x8a, 0x04, 0xad, 0x8e,
	0x66, 0x01, 0xea, 0x1f, 0x3b, 0x70, 0xb8, 0xb2, 0xbe, 0xc0, 0x43, 0xef, 0x70, 0xe2, 0xa4, 0x36,
	0x3e, 0x05, 0x89, 0x9d, 0x46, 0x23, 0x1b, 0xc0, 0xcb, 0xa2, 0x58, 0xf2, 0x46, 0xf7, 0xb3, 0x8a,
	0x43, 0xab, 0xa2, 0x2e, 0xfb, 0xf4, 0x83, 0x38, 0x52, 0x04, 0x42, 0x2c, 0xfc, 0xcb, 0x3f, 0x4b,
	0x70, 0xbb, 0x14, 0x51, 0x3c, 0x11, 0x69, 0xfd, 0x89, 0xa0, 0xcf, 0xe1, 0x96, 0x57, 0x28, 0x87,
	0xb7, 0xed, 0xcd, 0x38, 0x52, 0x4a, 0x3e, 0x5c, 0x42, 0x54, 0x5a, 0x9c, 0x62, 0x6c, 0xb8, 0x23,
	0xd6, 0xad, 0x52, 0x39, 0xb5, 0xb5, 0xe5, 0xa8, 0xb0, 0xe7, 0x2e, 0x6e, 0x4f, 0x52, 0x04, 0xc4,
	0x91, 0xc2, 0x11, 0xcc, 0xbf, 0xea, 0x53, 0xb8, 0xbb, 0x48, 0x38, 0xfb, 0x36, 0x34, 0xc2, 0x69,
	0x90, 0x5e, 0x28, 0x96, 0xf3, 0x13, 0xd8, 0x0f, 0x04, 0x8c, 0x4f, 0x11, 0xbb, 0xf1, 0x22, 0x8e,
	0x73, 0x96, 0xfa, 0xdb, 0x52, 0x75, 0x7a, 0xd4, 0x0d, 0x49, 0x10, 0xfe, 0x8f, 0x86, 0xf2, 0x97,
	0x1d, 0x68, 0x56, 0x17, 0xb7, 0x76, 0x22, 0x9f, 0xc3, 0x35, 0x33, 0x0d, 0xe1, 0xe3, 0x78, 0xaf,
	0x52, 0x43, 0x0a, 0xa4, 0x05, 0x87, 0xde, 0x88, 0x23, 0x65, 0xc1, 0x83, 0x17, 0x3f, 0xf2, 0x4f,
	0x82, 0x7a, 0x30, 0xe4, 0x75, 0xc6, 0xef, 0x7e, 0x22, 0x9a, 0x42, 0x7a, 0xde, 0x9d, 0xdb, 0x71,
	0xa4, 0xe4, 0x1d, 0x38, 0x6f, 0xaa, 0x5f, 0xc0, 0xc1, 0x39, 0xf1, 0xed, 0xe1, 0xfc, 0x3b, 0x3a,
	0x22, 0x6e, 0x72, 0x4e, 0x5d, 0x68, 0x18, 0xa6, 0x49, 0x82, 0x80, 0x21, 0x3c, 0x3b, 0x3b, 0xf8,
	0x14, 0xfe, 0x31, 0x64, 0x2b, 0xc5, 0x45, 0x6a, 0x1f, 0x6e, 0xe6, 0x58, 0x02, 0x2f, 0x99, 0xc0,
	0x69, 0x40, 0xfc, 0x4c, 0xff, 0xd8, 0x04, 0xa6, 0x08, 0xe6, 0xdf, 0x44, 0x26, 0x7d, 0xc3, 0x1d,
	0x50, 0xe7, 0x1b, 0x32, 0xe7, 0xba, 0xc7, 0x64, 0x32, 0x03, 0xf1, 0xf2, 0xb7, 0xfb, 0xf2, 0x5a,
	0x49, 0x66, 0x3f, 0x85, 0xdd, 0x33, 0xdb, 0xb5, 0xd0, 0x1d, 0x2d, 0x7d, 0x0a, 0xb5, 0xc5, 0x53,
	0xa8, 0x7d, 0x99, 0x3c, 0x85, 0xf2, 0x0a, 0x1c, 0x61, 0x78, 0xa3, 0xe2, 0x81, 0x5b, 0x49, 0x73,
	0xb4, 0xc1, 0xcb, 0x88, 0xce, 0x00, 0x95, 0xdf, 0x92, 0x95, 0x94, 0xea, 0xfa, 0x37, 0x08, 0x4d,
	0xa0, 0x95, 0xf7, 0x14, 0xf5, 0x0e, 0xbd, 0xbf, 0x91, 0x28, 0x4e, 0xe4, 0x0f, 0x36, 0x14, 0x4f,
	0xf4, 0xac, 0x42, 0xb6, 0xf9, 0x45, 0x37, 0xdc, 0xd1, 0xeb, 0xec, 0x26, 0x13, 0xb1, 0xa7, 0x59,
	0xcf, 0x7b, 0xb3, 0x2d, 0x51, 0x9e, 0xc3, 0x5b, 0x95, 0x02, 0xb6, 0x92, 0xf4, 0xbd, 0x2a, 0xd2,
	0xb2, 0xf6, 0x5d, 0x64, 0x5d, 0xe0, 0x19, 0x73, 0x37, 0x1b, 0x1d, 0xad, 0xbf, 0xfb, 0x13, 0xf9,
	0x78, 0x13, 0x81, 0x40, 0xe7, 0x45, 0x45, 0xda, 0x52, 0x67, 0x9e, 0x09, 0x3b, 0x60, 0xbc, 0xb6,
	0x6b, 0x6d, 0x89, 0xfa, 0x07, 0x78, 0x37, 0x4f, 0xfd, 0xd0, 0xf3, 0xc6, 0xf3, 0xed, 0x90, 0x77,
	0xbf, 0x86, 0xab, 0x4c, 0x41, 0xd0, 0x43, 0xd8, 0x4b, 0x05, 0x05, 0xc9, 0x62, 0x58, 0x5e, 0xaa,
	0xe4, 0xc3, 0x95, 0xbe, 0xc0, 0xd3, 0xef, 0xbe, 0x78, 0xd9, 0xba, 0xf2, 0xe2, 0xb2, 0x25, 0xfd,
	0x79, 0xd9, 0x92, 0xfe, 0xba, 0x6c, 0x49, 0xbf, 0xfe, 0xdd, 0xba, 0xf2, 0xbc, 0x66, 0x78, 0x76,
	0x7f, 0x8f, 0x95, 0x76, 0xef, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x44, 0x81, 0xe1, 0x88,
	0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorknetCompanyClient is the client API for WorknetCompany service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorknetCompanyClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	WorknetLocationList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetLocationListResp, error)
	// `method:"POST"`
	WorknetCompanyList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyListResp, error)
	// `method:"POST"`
	WorknetCompanyProfessionChange(ctx context.Context, in *WorknetProfessionChangeReq, opts ...grpc.CallOption) (*WorknetProfessionChangeResp, error)
	// `method:"POST"`
	WorknetProfessionNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetCvNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetCvStatusNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCvStatusNumberResp, error)
	// `method:"POST"`
	WorknetCompanyContestChange(ctx context.Context, in *WorknetContestChangeReq, opts ...grpc.CallOption) (*WorknetContestChangeResp, error)
	// `method:"POST"`
	WorknetContestNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetContestingNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetContestApplyNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error)
}

type worknetCompanyClient struct {
	cc *grpc.ClientConn
}

func NewWorknetCompanyClient(cc *grpc.ClientConn) WorknetCompanyClient {
	return &worknetCompanyClient{cc}
}

func (c *worknetCompanyClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetLocationList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetLocationListResp, error) {
	out := new(WorknetLocationListResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetLocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetCompanyList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyListResp, error) {
	out := new(WorknetCompanyListResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetCompanyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetCompanyProfessionChange(ctx context.Context, in *WorknetProfessionChangeReq, opts ...grpc.CallOption) (*WorknetProfessionChangeResp, error) {
	out := new(WorknetProfessionChangeResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetCompanyProfessionChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetProfessionNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error) {
	out := new(WorknetCompanyRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetProfessionNumberRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetCvNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error) {
	out := new(WorknetCompanyRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetCvNumberRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetCvStatusNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCvStatusNumberResp, error) {
	out := new(WorknetCvStatusNumberResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetCvStatusNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetCompanyContestChange(ctx context.Context, in *WorknetContestChangeReq, opts ...grpc.CallOption) (*WorknetContestChangeResp, error) {
	out := new(WorknetContestChangeResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetCompanyContestChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetContestNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error) {
	out := new(WorknetCompanyRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetContestNumberRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetContestingNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error) {
	out := new(WorknetCompanyRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetContestingNumberRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCompanyClient) WorknetContestApplyNumberRank(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCompanyRankResp, error) {
	out := new(WorknetCompanyRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCompany/WorknetContestApplyNumberRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorknetCompanyServer is the server API for WorknetCompany service.
type WorknetCompanyServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	WorknetLocationList(context.Context, *empty.Empty) (*WorknetLocationListResp, error)
	// `method:"POST"`
	WorknetCompanyList(context.Context, *empty.Empty) (*WorknetCompanyListResp, error)
	// `method:"POST"`
	WorknetCompanyProfessionChange(context.Context, *WorknetProfessionChangeReq) (*WorknetProfessionChangeResp, error)
	// `method:"POST"`
	WorknetProfessionNumberRank(context.Context, *empty.Empty) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetCvNumberRank(context.Context, *empty.Empty) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetCvStatusNumber(context.Context, *empty.Empty) (*WorknetCvStatusNumberResp, error)
	// `method:"POST"`
	WorknetCompanyContestChange(context.Context, *WorknetContestChangeReq) (*WorknetContestChangeResp, error)
	// `method:"POST"`
	WorknetContestNumberRank(context.Context, *empty.Empty) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetContestingNumberRank(context.Context, *empty.Empty) (*WorknetCompanyRankResp, error)
	// `method:"POST"`
	WorknetContestApplyNumberRank(context.Context, *empty.Empty) (*WorknetCompanyRankResp, error)
}

// UnimplementedWorknetCompanyServer can be embedded to have forward compatible implementations.
type UnimplementedWorknetCompanyServer struct {
}

func (*UnimplementedWorknetCompanyServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetLocationList(ctx context.Context, req *empty.Empty) (*WorknetLocationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetLocationList not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetCompanyList(ctx context.Context, req *empty.Empty) (*WorknetCompanyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCompanyList not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetCompanyProfessionChange(ctx context.Context, req *WorknetProfessionChangeReq) (*WorknetProfessionChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCompanyProfessionChange not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetProfessionNumberRank(ctx context.Context, req *empty.Empty) (*WorknetCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetProfessionNumberRank not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetCvNumberRank(ctx context.Context, req *empty.Empty) (*WorknetCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCvNumberRank not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetCvStatusNumber(ctx context.Context, req *empty.Empty) (*WorknetCvStatusNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCvStatusNumber not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetCompanyContestChange(ctx context.Context, req *WorknetContestChangeReq) (*WorknetContestChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCompanyContestChange not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetContestNumberRank(ctx context.Context, req *empty.Empty) (*WorknetCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetContestNumberRank not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetContestingNumberRank(ctx context.Context, req *empty.Empty) (*WorknetCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetContestingNumberRank not implemented")
}
func (*UnimplementedWorknetCompanyServer) WorknetContestApplyNumberRank(ctx context.Context, req *empty.Empty) (*WorknetCompanyRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetContestApplyNumberRank not implemented")
}

func RegisterWorknetCompanyServer(s *grpc.Server, srv WorknetCompanyServer) {
	s.RegisterService(&_WorknetCompany_serviceDesc, srv)
}

func _WorknetCompany_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetLocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetLocationList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetCompanyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetCompanyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetCompanyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetCompanyList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetCompanyProfessionChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetProfessionChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetCompanyProfessionChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetCompanyProfessionChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetCompanyProfessionChange(ctx, req.(*WorknetProfessionChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetProfessionNumberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetProfessionNumberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetProfessionNumberRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetProfessionNumberRank(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetCvNumberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetCvNumberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetCvNumberRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetCvNumberRank(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetCvStatusNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetCvStatusNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetCvStatusNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetCvStatusNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetCompanyContestChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorknetContestChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetCompanyContestChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetCompanyContestChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetCompanyContestChange(ctx, req.(*WorknetContestChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetContestNumberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetContestNumberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetContestNumberRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetContestNumberRank(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetContestingNumberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetContestingNumberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetContestingNumberRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetContestingNumberRank(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCompany_WorknetContestApplyNumberRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCompanyServer).WorknetContestApplyNumberRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCompany/WorknetContestApplyNumberRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCompanyServer).WorknetContestApplyNumberRank(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorknetCompany_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.WorknetCompany",
	HandlerType: (*WorknetCompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WorknetCompany_Ping_Handler,
		},
		{
			MethodName: "WorknetLocationList",
			Handler:    _WorknetCompany_WorknetLocationList_Handler,
		},
		{
			MethodName: "WorknetCompanyList",
			Handler:    _WorknetCompany_WorknetCompanyList_Handler,
		},
		{
			MethodName: "WorknetCompanyProfessionChange",
			Handler:    _WorknetCompany_WorknetCompanyProfessionChange_Handler,
		},
		{
			MethodName: "WorknetProfessionNumberRank",
			Handler:    _WorknetCompany_WorknetProfessionNumberRank_Handler,
		},
		{
			MethodName: "WorknetCvNumberRank",
			Handler:    _WorknetCompany_WorknetCvNumberRank_Handler,
		},
		{
			MethodName: "WorknetCvStatusNumber",
			Handler:    _WorknetCompany_WorknetCvStatusNumber_Handler,
		},
		{
			MethodName: "WorknetCompanyContestChange",
			Handler:    _WorknetCompany_WorknetCompanyContestChange_Handler,
		},
		{
			MethodName: "WorknetContestNumberRank",
			Handler:    _WorknetCompany_WorknetContestNumberRank_Handler,
		},
		{
			MethodName: "WorknetContestingNumberRank",
			Handler:    _WorknetCompany_WorknetContestingNumberRank_Handler,
		},
		{
			MethodName: "WorknetContestApplyNumberRank",
			Handler:    _WorknetCompany_WorknetContestApplyNumberRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *WorknetLocationListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetLocationListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetLocationListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocationList) > 0 {
		for iNdEx := len(m.LocationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetLocationListResp_LocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetLocationListResp_LocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetLocationListResp_LocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CompanyNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CompanyNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CityName) > 0 {
		i -= len(m.CityName)
		copy(dAtA[i:], m.CityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CityName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCompanyListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCompanyListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCompanyListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CompanyList) > 0 {
		for iNdEx := len(m.CompanyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompanyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCompanyListResp_WorknetCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCompanyListResp_WorknetCompany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCompanyListResp_WorknetCompany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CompanyId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetProfessionChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetProfessionChangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetProfessionChangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA2 := make([]byte, len(m.Time)*10)
		var j1 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyId) > 0 {
		dAtA4 := make([]byte, len(m.CompanyId)*10)
		var j3 int
		for _, num1 := range m.CompanyId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetProfessionChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetProfessionChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetProfessionChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Profession) > 0 {
		for iNdEx := len(m.Profession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Time) > 0 {
		for iNdEx := len(m.Time) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Time[iNdEx])
			copy(dAtA[i:], m.Time[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Time[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetProfessionChangeResp_WorknetProfession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetProfessionChangeResp_WorknetProfession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetProfessionChangeResp_WorknetProfession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProfessionChange) > 0 {
		dAtA6 := make([]byte, len(m.ProfessionChange)*10)
		var j5 int
		for _, num1 := range m.ProfessionChange {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCompanyRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCompanyRankResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCompanyRankResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		dAtA8 := make([]byte, len(m.Number)*10)
		var j7 int
		for _, num1 := range m.Number {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyName) > 0 {
		for iNdEx := len(m.CompanyName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompanyName[iNdEx])
			copy(dAtA[i:], m.CompanyName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCvStatusNumberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCvStatusNumberResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCvStatusNumberResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StatusNumber) > 0 {
		dAtA10 := make([]byte, len(m.StatusNumber)*10)
		var j9 int
		for _, num1 := range m.StatusNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetContestChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetContestChangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetContestChangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA12 := make([]byte, len(m.Time)*10)
		var j11 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintApi(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyId) > 0 {
		dAtA14 := make([]byte, len(m.CompanyId)*10)
		var j13 int
		for _, num1 := range m.CompanyId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorknetContestChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetContestChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetContestChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contest) > 0 {
		for iNdEx := len(m.Contest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Time) > 0 {
		for iNdEx := len(m.Time) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Time[iNdEx])
			copy(dAtA[i:], m.Time[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Time[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetContestChangeResp_WorknetContest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetContestChangeResp_WorknetContest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetContestChangeResp_WorknetContest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContestChange) > 0 {
		dAtA16 := make([]byte, len(m.ContestChange)*10)
		var j15 int
		for _, num1 := range m.ContestChange {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorknetLocationListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocationList) > 0 {
		for _, e := range m.LocationList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetLocationListResp_LocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CompanyNumber != 0 {
		n += 1 + sovApi(uint64(m.CompanyNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCompanyListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompanyList) > 0 {
		for _, e := range m.CompanyList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCompanyListResp_WorknetCompany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyId != 0 {
		n += 1 + sovApi(uint64(m.CompanyId))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetProfessionChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		l = 0
		for _, e := range m.CompanyId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetProfessionChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		for _, s := range m.Time {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Profession) > 0 {
		for _, e := range m.Profession {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetProfessionChangeResp_WorknetProfession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ProfessionChange) > 0 {
		l = 0
		for _, e := range m.ProfessionChange {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCompanyRankResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompanyName) > 0 {
		for _, s := range m.CompanyName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Number) > 0 {
		l = 0
		for _, e := range m.Number {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCvStatusNumberResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatusNumber) > 0 {
		l = 0
		for _, e := range m.StatusNumber {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetContestChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		l = 0
		for _, e := range m.CompanyId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetContestChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		for _, s := range m.Time {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Contest) > 0 {
		for _, e := range m.Contest {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetContestChangeResp_WorknetContest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ContestChange) > 0 {
		l = 0
		for _, e := range m.ContestChange {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorknetLocationListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetLocationListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetLocationListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationList = append(m.LocationList, &WorknetLocationListResp_LocationInfo{})
			if err := m.LocationList[len(m.LocationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetLocationListResp_LocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyNumber", wireType)
			}
			m.CompanyNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCompanyListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCompanyListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCompanyListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyList = append(m.CompanyList, &WorknetCompanyListResp_WorknetCompany{})
			if err := m.CompanyList[len(m.CompanyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCompanyListResp_WorknetCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetProfessionChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetProfessionChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetProfessionChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompanyId = append(m.CompanyId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompanyId) == 0 {
					m.CompanyId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompanyId = append(m.CompanyId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetProfessionChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetProfessionChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetProfessionChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = append(m.Profession, &WorknetProfessionChangeResp_WorknetProfession{})
			if err := m.Profession[len(m.Profession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetProfessionChangeResp_WorknetProfession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetProfession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetProfession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProfessionChange = append(m.ProfessionChange, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProfessionChange) == 0 {
					m.ProfessionChange = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProfessionChange = append(m.ProfessionChange, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessionChange", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCompanyRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCompanyRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCompanyRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = append(m.CompanyName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Number = append(m.Number, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Number) == 0 {
					m.Number = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Number = append(m.Number, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCvStatusNumberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCvStatusNumberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCvStatusNumberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StatusNumber = append(m.StatusNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StatusNumber) == 0 {
					m.StatusNumber = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StatusNumber = append(m.StatusNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusNumber", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetContestChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetContestChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetContestChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompanyId = append(m.CompanyId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompanyId) == 0 {
					m.CompanyId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompanyId = append(m.CompanyId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetContestChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetContestChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetContestChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contest = append(m.Contest, &WorknetContestChangeResp_WorknetContest{})
			if err := m.Contest[len(m.Contest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetContestChangeResp_WorknetContest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetContest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetContest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContestChange = append(m.ContestChange, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ContestChange) == 0 {
					m.ContestChange = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContestChange = append(m.ContestChange, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestChange", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
