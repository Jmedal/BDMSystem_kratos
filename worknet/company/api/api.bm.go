// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorknetCompanyPing = "/service.v1.WorknetCompany/Ping"
var PathWorknetCompanyWorknetLocationList = "/service.v1.WorknetCompany/WorknetLocationList"
var PathWorknetCompanyWorknetCompanyList = "/service.v1.WorknetCompany/WorknetCompanyList"
var PathWorknetCompanyWorknetCompanyProfessionChange = "/service.v1.WorknetCompany/WorknetCompanyProfessionChange"
var PathWorknetCompanyWorknetProfessionNumberRank = "/service.v1.WorknetCompany/WorknetProfessionNumberRank"
var PathWorknetCompanyWorknetCvNumberRank = "/service.v1.WorknetCompany/WorknetCvNumberRank"
var PathWorknetCompanyWorknetCvStatusNumber = "/service.v1.WorknetCompany/WorknetCvStatusNumber"
var PathWorknetCompanyWorknetCompanyContestChange = "/service.v1.WorknetCompany/WorknetCompanyContestChange"
var PathWorknetCompanyWorknetContestNumberRank = "/service.v1.WorknetCompany/WorknetContestNumberRank"
var PathWorknetCompanyWorknetContestingNumberRank = "/service.v1.WorknetCompany/WorknetContestingNumberRank"
var PathWorknetCompanyWorknetContestApplyNumberRank = "/service.v1.WorknetCompany/WorknetContestApplyNumberRank"

var PathTokenVerify = "/service.v1.Token/Verify"

// WorknetCompanyBMServer is the server API for WorknetCompany service.
type WorknetCompanyBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `method:"POST"`
	WorknetLocationList(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetLocationListResp, err error)

	// `method:"POST"`
	WorknetCompanyList(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyListResp, err error)

	// `method:"POST"`
	WorknetCompanyProfessionChange(ctx context.Context, req *WorknetProfessionChangeReq) (resp *WorknetProfessionChangeResp, err error)

	// `method:"POST"`
	WorknetProfessionNumberRank(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyRankResp, err error)

	// `method:"POST"`
	WorknetCvNumberRank(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyRankResp, err error)

	// `method:"POST"`
	WorknetCvStatusNumber(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCvStatusNumberResp, err error)

	// `method:"POST"`
	WorknetCompanyContestChange(ctx context.Context, req *WorknetContestChangeReq) (resp *WorknetContestChangeResp, err error)

	// `method:"POST"`
	WorknetContestNumberRank(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyRankResp, err error)

	// `method:"POST"`
	WorknetContestingNumberRank(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyRankResp, err error)

	// `method:"POST"`
	WorknetContestApplyNumberRank(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCompanyRankResp, err error)
}

var WorknetCompanySvc WorknetCompanyBMServer

func worknetCompanyPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.Ping(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetLocationList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetLocationList(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetCompanyList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetCompanyList(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetCompanyProfessionChange(c *bm.Context) {
	p := new(WorknetProfessionChangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetCompanyProfessionChange(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetProfessionNumberRank(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetProfessionNumberRank(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetCvNumberRank(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetCvNumberRank(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetCvStatusNumber(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetCvStatusNumber(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetCompanyContestChange(c *bm.Context) {
	p := new(WorknetContestChangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetCompanyContestChange(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetContestNumberRank(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetContestNumberRank(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetContestingNumberRank(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetContestingNumberRank(c, p)
	c.JSON(resp, err)
}

func worknetCompanyWorknetContestApplyNumberRank(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCompanySvc.WorknetContestApplyNumberRank(c, p)
	c.JSON(resp, err)
}

// RegisterWorknetCompanyBMServer Register the blademaster route
func RegisterWorknetCompanyBMServer(e *bm.Engine, server WorknetCompanyBMServer) {
	WorknetCompanySvc = server
	e.GET("/service.v1.WorknetCompany/Ping", worknetCompanyPing)
	e.POST("/service.v1.WorknetCompany/WorknetLocationList", worknetCompanyWorknetLocationList)
	e.POST("/service.v1.WorknetCompany/WorknetCompanyList", worknetCompanyWorknetCompanyList)
	e.POST("/service.v1.WorknetCompany/WorknetCompanyProfessionChange", worknetCompanyWorknetCompanyProfessionChange)
	e.POST("/service.v1.WorknetCompany/WorknetProfessionNumberRank", worknetCompanyWorknetProfessionNumberRank)
	e.POST("/service.v1.WorknetCompany/WorknetCvNumberRank", worknetCompanyWorknetCvNumberRank)
	e.POST("/service.v1.WorknetCompany/WorknetCvStatusNumber", worknetCompanyWorknetCvStatusNumber)
	e.POST("/service.v1.WorknetCompany/WorknetCompanyContestChange", worknetCompanyWorknetCompanyContestChange)
	e.POST("/service.v1.WorknetCompany/WorknetContestNumberRank", worknetCompanyWorknetContestNumberRank)
	e.POST("/service.v1.WorknetCompany/WorknetContestingNumberRank", worknetCompanyWorknetContestingNumberRank)
	e.POST("/service.v1.WorknetCompany/WorknetContestApplyNumberRank", worknetCompanyWorknetContestApplyNumberRank)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
