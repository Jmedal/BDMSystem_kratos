// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorknetUserNumberResp struct {
	//普通用户
	CommonUser int64 `protobuf:"varint,1,opt,name=commonUser,proto3" json:"commonUser"`
	//公司用户
	CompanyUser int64 `protobuf:"varint,2,opt,name=companyUser,proto3" json:"companyUser"`
	//老师用户
	TeacherUser          int64    `protobuf:"varint,3,opt,name=teacherUser,proto3" json:"teacherUser"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetUserNumberResp) Reset()         { *m = WorknetUserNumberResp{} }
func (m *WorknetUserNumberResp) String() string { return proto.CompactTextString(m) }
func (*WorknetUserNumberResp) ProtoMessage()    {}
func (*WorknetUserNumberResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *WorknetUserNumberResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetUserNumberResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetUserNumberResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetUserNumberResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetUserNumberResp.Merge(m, src)
}
func (m *WorknetUserNumberResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetUserNumberResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetUserNumberResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetUserNumberResp proto.InternalMessageInfo

type WorknetUserActivityResp struct {
	//激活
	Activity int64 `protobuf:"varint,1,opt,name=activity,proto3" json:"activity"`
	//未激活
	Inactivity           int64    `protobuf:"varint,2,opt,name=inactivity,proto3" json:"inactivity"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetUserActivityResp) Reset()         { *m = WorknetUserActivityResp{} }
func (m *WorknetUserActivityResp) String() string { return proto.CompactTextString(m) }
func (*WorknetUserActivityResp) ProtoMessage()    {}
func (*WorknetUserActivityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WorknetUserActivityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetUserActivityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetUserActivityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetUserActivityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetUserActivityResp.Merge(m, src)
}
func (m *WorknetUserActivityResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetUserActivityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetUserActivityResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetUserActivityResp proto.InternalMessageInfo

type WorknetUserSexResp struct {
	//激活
	Man int64 `protobuf:"varint,1,opt,name=man,proto3" json:"man"`
	//未激活
	Human                int64    `protobuf:"varint,2,opt,name=human,proto3" json:"human"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetUserSexResp) Reset()         { *m = WorknetUserSexResp{} }
func (m *WorknetUserSexResp) String() string { return proto.CompactTextString(m) }
func (*WorknetUserSexResp) ProtoMessage()    {}
func (*WorknetUserSexResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *WorknetUserSexResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetUserSexResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetUserSexResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetUserSexResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetUserSexResp.Merge(m, src)
}
func (m *WorknetUserSexResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetUserSexResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetUserSexResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetUserSexResp proto.InternalMessageInfo

type WorknetUserChangeResp struct {
	//时间
	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
	//普通用户
	CommonUser []int64 `protobuf:"varint,2,rep,packed,name=commonUser,proto3" json:"commonUser"`
	//公司用户
	CompanyUser []int64 `protobuf:"varint,3,rep,packed,name=companyUser,proto3" json:"companyUser"`
	//老师用户
	TeacherUser          []int64  `protobuf:"varint,4,rep,packed,name=teacherUser,proto3" json:"teacherUser"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetUserChangeResp) Reset()         { *m = WorknetUserChangeResp{} }
func (m *WorknetUserChangeResp) String() string { return proto.CompactTextString(m) }
func (*WorknetUserChangeResp) ProtoMessage()    {}
func (*WorknetUserChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *WorknetUserChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetUserChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetUserChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetUserChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetUserChangeResp.Merge(m, src)
}
func (m *WorknetUserChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetUserChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetUserChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetUserChangeResp proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorknetUserNumberResp)(nil), "service.v1.WorknetUserNumberResp")
	proto.RegisterType((*WorknetUserActivityResp)(nil), "service.v1.WorknetUserActivityResp")
	proto.RegisterType((*WorknetUserSexResp)(nil), "service.v1.WorknetUserSexResp")
	proto.RegisterType((*WorknetUserChangeResp)(nil), "service.v1.WorknetUserChangeResp")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xeb, 0x34, 0xd4, 0x93, 0x92, 0xc2, 0x22, 0xa0, 0x4d, 0x91, 0x37, 0x98, 0x4b, 0x24,
	0x84, 0xab, 0x06, 0x89, 0x7b, 0x03, 0x48, 0xfc, 0x48, 0x55, 0xb5, 0x14, 0x90, 0xb8, 0x20, 0xdb,
	0xdd, 0x3a, 0xab, 0x62, 0xaf, 0xf1, 0x4f, 0x44, 0x1e, 0x81, 0x37, 0xe0, 0x25, 0x78, 0x8f, 0x4a,
	0x5c, 0x78, 0x02, 0x0b, 0xc2, 0xcd, 0x4f, 0x81, 0xbc, 0xeb, 0xc6, 0x6b, 0xa8, 0x0f, 0xb9, 0xd8,
	0x33, 0xdf, 0xce, 0x37, 0x3b, 0x3b, 0x33, 0x1f, 0x18, 0x4e, 0xc4, 0xec, 0x28, 0xe6, 0x29, 0x47,
	0x90, 0xd0, 0x78, 0xc6, 0x3c, 0x6a, 0xcf, 0x0e, 0x06, 0x8f, 0x7c, 0x96, 0x4e, 0x33, 0xd7, 0xf6,
	0x78, 0xb0, 0xef, 0x73, 0x9f, 0xef, 0x8b, 0x10, 0x37, 0x3b, 0x13, 0x9e, 0x70, 0x84, 0x25, 0xa9,
	0x83, 0x3d, 0x9f, 0x73, 0xff, 0x13, 0xad, 0xa3, 0x68, 0x10, 0xa5, 0x73, 0x79, 0x68, 0x7d, 0xd7,
	0xe0, 0xf6, 0x7b, 0x1e, 0x9f, 0x87, 0x34, 0x7d, 0x9b, 0xd0, 0xf8, 0x28, 0x0b, 0x5c, 0x1a, 0x13,
	0x9a, 0x44, 0xc8, 0x06, 0xf0, 0x78, 0x10, 0xf0, 0xb0, 0xc4, 0x77, 0xb4, 0xa1, 0x36, 0xd2, 0x27,
	0xfd, 0x22, 0xc7, 0x0a, 0x4a, 0x14, 0x1b, 0x1d, 0x40, 0xcf, 0xe3, 0x41, 0xe4, 0x84, 0x73, 0x41,
	0x58, 0x17, 0x84, 0xed, 0x22, 0xc7, 0x2a, 0x4c, 0x54, 0xa7, 0xa4, 0xa4, 0xd4, 0xf1, 0xa6, 0x34,
	0x16, 0x14, 0xbd, 0xa6, 0x28, 0x30, 0x51, 0x1d, 0x2b, 0x81, 0xbb, 0x4a, 0xb9, 0x87, 0x5e, 0xca,
	0x66, 0x2c, 0x9d, 0x8b, 0x82, 0x47, 0xb0, 0xe9, 0x54, 0x7e, 0x55, 0xee, 0x56, 0x91, 0xe3, 0x25,
	0x46, 0x96, 0x56, 0xf9, 0x34, 0x16, 0x2e, 0x63, 0xd7, 0xeb, 0xa7, 0xd5, 0x28, 0x51, 0x6c, 0xeb,
	0x18, 0x90, 0x72, 0xe9, 0x1b, 0xfa, 0x45, 0xdc, 0xb7, 0x0b, 0x7a, 0xe0, 0x84, 0xd5, 0x55, 0xd7,
	0x8a, 0x1c, 0x97, 0x2e, 0x29, 0x3f, 0x08, 0xc3, 0xc6, 0x34, 0x2b, 0x0f, 0x65, 0x6e, 0xa3, 0xc8,
	0xb1, 0x04, 0x88, 0xfc, 0x59, 0x3f, 0x9a, 0x6d, 0x7f, 0x3a, 0x75, 0x42, 0x9f, 0x8a, 0xac, 0xf7,
	0xa0, 0x93, 0xb2, 0x80, 0xee, 0x68, 0x43, 0x7d, 0x64, 0x4c, 0x36, 0x8b, 0x1c, 0x0b, 0x9f, 0x88,
	0xef, 0x3f, 0x43, 0x59, 0x1f, 0xea, 0xab, 0x0d, 0x45, 0x17, 0x84, 0x95, 0x86, 0xd2, 0xa9, 0x29,
	0xad, 0x43, 0x79, 0x06, 0xfd, 0x77, 0x34, 0x66, 0x67, 0xf3, 0x13, 0x7e, 0x4e, 0x43, 0x42, 0x3f,
	0xa3, 0x31, 0xf4, 0x1c, 0xcf, 0xa3, 0x49, 0x22, 0x10, 0xd1, 0x23, 0x63, 0x72, 0xa3, 0xc8, 0xf1,
	0x96, 0x84, 0x3f, 0xa6, 0x22, 0x52, 0x0d, 0xb2, 0x5c, 0xd8, 0x6e, 0x64, 0x49, 0x22, 0x64, 0x41,
	0x37, 0x4b, 0x68, 0xfc, 0xf2, 0xb4, 0xea, 0x32, 0x14, 0x39, 0xae, 0x10, 0x52, 0xfd, 0xd1, 0x43,
	0x30, 0x62, 0x27, 0x3c, 0xe5, 0xc1, 0x6b, 0x2a, 0x67, 0x69, 0x4c, 0xae, 0x17, 0x39, 0xae, 0x41,
	0x52, 0x9b, 0xe3, 0xaf, 0x3a, 0xf4, 0x94, 0xbe, 0xa3, 0x27, 0xd0, 0x39, 0x66, 0xa1, 0x8f, 0xee,
	0xd8, 0x52, 0x24, 0xf6, 0xa5, 0x48, 0xec, 0xe7, 0xa5, 0x48, 0x06, 0x2d, 0x38, 0x3a, 0x82, 0x9b,
	0xff, 0xa9, 0xa6, 0x35, 0xc9, 0x7d, 0xbb, 0x16, 0xaf, 0x7d, 0xb5, 0xd8, 0x08, 0xdc, 0xba, 0x62,
	0xad, 0x5b, 0x33, 0x3e, 0x68, 0xc9, 0xd8, 0xd0, 0xc3, 0x0b, 0xe8, 0x37, 0xb7, 0xb6, 0x35, 0x9d,
	0xd9, 0x92, 0xee, 0x72, 0xd3, 0x4f, 0x1a, 0xa2, 0x93, 0x65, 0xcb, 0x95, 0x5d, 0xf9, 0xcd, 0xf5,
	0xa6, 0x8f, 0x5f, 0xc1, 0x86, 0x98, 0x34, 0x3a, 0x84, 0xae, 0x1c, 0x3c, 0x1a, 0xa8, 0xac, 0xe6,
	0x4a, 0x0d, 0xf6, 0x5a, 0xcf, 0x92, 0x68, 0xb2, 0x7b, 0xf1, 0xdb, 0x5c, 0xbb, 0x58, 0x98, 0xda,
	0xcf, 0x85, 0xa9, 0xfd, 0x5a, 0x98, 0xda, 0xb7, 0x3f, 0xe6, 0xda, 0x07, 0xdd, 0x89, 0x98, 0xdb,
	0x15, 0x95, 0x3d, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x74, 0x94, 0xc5, 0x4d, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorknetUserClient is the client API for WorknetUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorknetUserClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	WorknetUserNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserNumberResp, error)
	// `method:"POST"`
	WorknetUserActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserActivityResp, error)
	// `method:"POST"`
	WorknetUserSex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserSexResp, error)
	// `method:"POST"`
	WorknetUserNumberChange(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserChangeResp, error)
}

type worknetUserClient struct {
	cc *grpc.ClientConn
}

func NewWorknetUserClient(cc *grpc.ClientConn) WorknetUserClient {
	return &worknetUserClient{cc}
}

func (c *worknetUserClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetUser/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetUserClient) WorknetUserNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserNumberResp, error) {
	out := new(WorknetUserNumberResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetUser/WorknetUserNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetUserClient) WorknetUserActivity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserActivityResp, error) {
	out := new(WorknetUserActivityResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetUser/WorknetUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetUserClient) WorknetUserSex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserSexResp, error) {
	out := new(WorknetUserSexResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetUser/WorknetUserSex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetUserClient) WorknetUserNumberChange(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetUserChangeResp, error) {
	out := new(WorknetUserChangeResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetUser/WorknetUserNumberChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorknetUserServer is the server API for WorknetUser service.
type WorknetUserServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	WorknetUserNumber(context.Context, *empty.Empty) (*WorknetUserNumberResp, error)
	// `method:"POST"`
	WorknetUserActivity(context.Context, *empty.Empty) (*WorknetUserActivityResp, error)
	// `method:"POST"`
	WorknetUserSex(context.Context, *empty.Empty) (*WorknetUserSexResp, error)
	// `method:"POST"`
	WorknetUserNumberChange(context.Context, *empty.Empty) (*WorknetUserChangeResp, error)
}

// UnimplementedWorknetUserServer can be embedded to have forward compatible implementations.
type UnimplementedWorknetUserServer struct {
}

func (*UnimplementedWorknetUserServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorknetUserServer) WorknetUserNumber(ctx context.Context, req *empty.Empty) (*WorknetUserNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetUserNumber not implemented")
}
func (*UnimplementedWorknetUserServer) WorknetUserActivity(ctx context.Context, req *empty.Empty) (*WorknetUserActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetUserActivity not implemented")
}
func (*UnimplementedWorknetUserServer) WorknetUserSex(ctx context.Context, req *empty.Empty) (*WorknetUserSexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetUserSex not implemented")
}
func (*UnimplementedWorknetUserServer) WorknetUserNumberChange(ctx context.Context, req *empty.Empty) (*WorknetUserChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetUserNumberChange not implemented")
}

func RegisterWorknetUserServer(s *grpc.Server, srv WorknetUserServer) {
	s.RegisterService(&_WorknetUser_serviceDesc, srv)
}

func _WorknetUser_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetUserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetUser/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetUserServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetUser_WorknetUserNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetUserServer).WorknetUserNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetUser/WorknetUserNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetUserServer).WorknetUserNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetUser_WorknetUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetUserServer).WorknetUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetUser/WorknetUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetUserServer).WorknetUserActivity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetUser_WorknetUserSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetUserServer).WorknetUserSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetUser/WorknetUserSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetUserServer).WorknetUserSex(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetUser_WorknetUserNumberChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetUserServer).WorknetUserNumberChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetUser/WorknetUserNumberChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetUserServer).WorknetUserNumberChange(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorknetUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.WorknetUser",
	HandlerType: (*WorknetUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WorknetUser_Ping_Handler,
		},
		{
			MethodName: "WorknetUserNumber",
			Handler:    _WorknetUser_WorknetUserNumber_Handler,
		},
		{
			MethodName: "WorknetUserActivity",
			Handler:    _WorknetUser_WorknetUserActivity_Handler,
		},
		{
			MethodName: "WorknetUserSex",
			Handler:    _WorknetUser_WorknetUserSex_Handler,
		},
		{
			MethodName: "WorknetUserNumberChange",
			Handler:    _WorknetUser_WorknetUserNumberChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *WorknetUserNumberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetUserNumberResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetUserNumberResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeacherUser != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeacherUser))
		i--
		dAtA[i] = 0x18
	}
	if m.CompanyUser != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CompanyUser))
		i--
		dAtA[i] = 0x10
	}
	if m.CommonUser != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CommonUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetUserActivityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetUserActivityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetUserActivityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Inactivity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Inactivity))
		i--
		dAtA[i] = 0x10
	}
	if m.Activity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Activity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetUserSexResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetUserSexResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetUserSexResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Human != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Human))
		i--
		dAtA[i] = 0x10
	}
	if m.Man != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Man))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetUserChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetUserChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetUserChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeacherUser) > 0 {
		dAtA2 := make([]byte, len(m.TeacherUser)*10)
		var j1 int
		for _, num1 := range m.TeacherUser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CompanyUser) > 0 {
		dAtA4 := make([]byte, len(m.CompanyUser)*10)
		var j3 int
		for _, num1 := range m.CompanyUser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CommonUser) > 0 {
		dAtA6 := make([]byte, len(m.CommonUser)*10)
		var j5 int
		for _, num1 := range m.CommonUser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Time) > 0 {
		for iNdEx := len(m.Time) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Time[iNdEx])
			copy(dAtA[i:], m.Time[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Time[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorknetUserNumberResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonUser != 0 {
		n += 1 + sovApi(uint64(m.CommonUser))
	}
	if m.CompanyUser != 0 {
		n += 1 + sovApi(uint64(m.CompanyUser))
	}
	if m.TeacherUser != 0 {
		n += 1 + sovApi(uint64(m.TeacherUser))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetUserActivityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Activity != 0 {
		n += 1 + sovApi(uint64(m.Activity))
	}
	if m.Inactivity != 0 {
		n += 1 + sovApi(uint64(m.Inactivity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetUserSexResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Man != 0 {
		n += 1 + sovApi(uint64(m.Man))
	}
	if m.Human != 0 {
		n += 1 + sovApi(uint64(m.Human))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetUserChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		for _, s := range m.Time {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CommonUser) > 0 {
		l = 0
		for _, e := range m.CommonUser {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.CompanyUser) > 0 {
		l = 0
		for _, e := range m.CompanyUser {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.TeacherUser) > 0 {
		l = 0
		for _, e := range m.TeacherUser {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorknetUserNumberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetUserNumberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetUserNumberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonUser", wireType)
			}
			m.CommonUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUser", wireType)
			}
			m.CompanyUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherUser", wireType)
			}
			m.TeacherUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeacherUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetUserActivityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetUserActivityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetUserActivityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactivity", wireType)
			}
			m.Inactivity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inactivity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetUserSexResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetUserSexResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetUserSexResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Man", wireType)
			}
			m.Man = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Man |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Human", wireType)
			}
			m.Human = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Human |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetUserChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetUserChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetUserChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CommonUser = append(m.CommonUser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CommonUser) == 0 {
					m.CommonUser = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CommonUser = append(m.CommonUser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonUser", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompanyUser = append(m.CompanyUser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompanyUser) == 0 {
					m.CompanyUser = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompanyUser = append(m.CompanyUser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUser", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeacherUser = append(m.TeacherUser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeacherUser) == 0 {
					m.TeacherUser = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeacherUser = append(m.TeacherUser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherUser", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
