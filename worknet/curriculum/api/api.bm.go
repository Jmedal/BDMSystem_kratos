// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorknetCurriculumPing = "/service.v1.WorknetCurriculum/Ping"
var PathWorknetCurriculumWorknetCurriculumGraph = "/service.v1.WorknetCurriculum/WorknetCurriculumGraph"
var PathWorknetCurriculumWorknetCurriculumCourse = "/service.v1.WorknetCurriculum/WorknetCurriculumCourse"

var PathTokenVerify = "/service.v1.Token/Verify"

// WorknetCurriculumBMServer is the server API for WorknetCurriculum service.
type WorknetCurriculumBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `method:"POST"`
	WorknetCurriculumGraph(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCurriculumGraphResp, err error)

	// `method:"POST"`
	WorknetCurriculumCourse(ctx context.Context, req *google_protobuf1.Empty) (resp *WorknetCurriculumCourseResp, err error)
}

var WorknetCurriculumSvc WorknetCurriculumBMServer

func worknetCurriculumPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCurriculumSvc.Ping(c, p)
	c.JSON(resp, err)
}

func worknetCurriculumWorknetCurriculumGraph(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCurriculumSvc.WorknetCurriculumGraph(c, p)
	c.JSON(resp, err)
}

func worknetCurriculumWorknetCurriculumCourse(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorknetCurriculumSvc.WorknetCurriculumCourse(c, p)
	c.JSON(resp, err)
}

// RegisterWorknetCurriculumBMServer Register the blademaster route
func RegisterWorknetCurriculumBMServer(e *bm.Engine, server WorknetCurriculumBMServer) {
	WorknetCurriculumSvc = server
	e.GET("/service.v1.WorknetCurriculum/Ping", worknetCurriculumPing)
	e.POST("/service.v1.WorknetCurriculum/WorknetCurriculumGraph", worknetCurriculumWorknetCurriculumGraph)
	e.POST("/service.v1.WorknetCurriculum/WorknetCurriculumCourse", worknetCurriculumWorknetCurriculumCourse)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
