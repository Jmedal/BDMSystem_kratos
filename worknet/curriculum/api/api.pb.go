// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorknetCurriculumGraphResp struct {
	//学科名
	Nodes []*WorknetCurriculumGraphResp_Curriculum `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes"`
	//关系
	Links                []*WorknetCurriculumGraphResp_Link `protobuf:"bytes,2,rep,name=links,proto3" json:"links"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *WorknetCurriculumGraphResp) Reset()         { *m = WorknetCurriculumGraphResp{} }
func (m *WorknetCurriculumGraphResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCurriculumGraphResp) ProtoMessage()    {}
func (*WorknetCurriculumGraphResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *WorknetCurriculumGraphResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCurriculumGraphResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCurriculumGraphResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCurriculumGraphResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCurriculumGraphResp.Merge(m, src)
}
func (m *WorknetCurriculumGraphResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCurriculumGraphResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCurriculumGraphResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCurriculumGraphResp proto.InternalMessageInfo

type WorknetCurriculumGraphResp_Curriculum struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCurriculumGraphResp_Curriculum) Reset()         { *m = WorknetCurriculumGraphResp_Curriculum{} }
func (m *WorknetCurriculumGraphResp_Curriculum) String() string { return proto.CompactTextString(m) }
func (*WorknetCurriculumGraphResp_Curriculum) ProtoMessage()    {}
func (*WorknetCurriculumGraphResp_Curriculum) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}
func (m *WorknetCurriculumGraphResp_Curriculum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCurriculumGraphResp_Curriculum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCurriculumGraphResp_Curriculum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCurriculumGraphResp_Curriculum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCurriculumGraphResp_Curriculum.Merge(m, src)
}
func (m *WorknetCurriculumGraphResp_Curriculum) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCurriculumGraphResp_Curriculum) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCurriculumGraphResp_Curriculum.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCurriculumGraphResp_Curriculum proto.InternalMessageInfo

type WorknetCurriculumGraphResp_Link struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Source               int64    `protobuf:"varint,2,opt,name=source,proto3" json:"source"`
	Target               int64    `protobuf:"varint,3,opt,name=target,proto3" json:"target"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCurriculumGraphResp_Link) Reset()         { *m = WorknetCurriculumGraphResp_Link{} }
func (m *WorknetCurriculumGraphResp_Link) String() string { return proto.CompactTextString(m) }
func (*WorknetCurriculumGraphResp_Link) ProtoMessage()    {}
func (*WorknetCurriculumGraphResp_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 1}
}
func (m *WorknetCurriculumGraphResp_Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCurriculumGraphResp_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCurriculumGraphResp_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCurriculumGraphResp_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCurriculumGraphResp_Link.Merge(m, src)
}
func (m *WorknetCurriculumGraphResp_Link) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCurriculumGraphResp_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCurriculumGraphResp_Link.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCurriculumGraphResp_Link proto.InternalMessageInfo

type WorknetCurriculumCourseResp struct {
	//学科名
	CurriculumName []string `protobuf:"bytes,1,rep,name=curriculumName,proto3" json:"curriculumName"`
	//课程数量
	CourseNumber         []string `protobuf:"bytes,2,rep,name=courseNumber,proto3" json:"courseNumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorknetCurriculumCourseResp) Reset()         { *m = WorknetCurriculumCourseResp{} }
func (m *WorknetCurriculumCourseResp) String() string { return proto.CompactTextString(m) }
func (*WorknetCurriculumCourseResp) ProtoMessage()    {}
func (*WorknetCurriculumCourseResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WorknetCurriculumCourseResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorknetCurriculumCourseResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorknetCurriculumCourseResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorknetCurriculumCourseResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorknetCurriculumCourseResp.Merge(m, src)
}
func (m *WorknetCurriculumCourseResp) XXX_Size() int {
	return m.Size()
}
func (m *WorknetCurriculumCourseResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WorknetCurriculumCourseResp.DiscardUnknown(m)
}

var xxx_messageInfo_WorknetCurriculumCourseResp proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorknetCurriculumGraphResp)(nil), "service.v1.WorknetCurriculumGraphResp")
	proto.RegisterType((*WorknetCurriculumGraphResp_Curriculum)(nil), "service.v1.WorknetCurriculumGraphResp.Curriculum")
	proto.RegisterType((*WorknetCurriculumGraphResp_Link)(nil), "service.v1.WorknetCurriculumGraphResp.Link")
	proto.RegisterType((*WorknetCurriculumCourseResp)(nil), "service.v1.WorknetCurriculumCourseResp")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x9d, 0x1f, 0x7d, 0xbe, 0xfd, 0x28, 0x30, 0x8b, 0x10, 0x1c, 0x14, 0x47, 0x5e, 0x40,
	0xa4, 0x0a, 0x57, 0x0d, 0x88, 0x05, 0x3b, 0x5c, 0x10, 0x02, 0xaa, 0x0a, 0x8d, 0x10, 0xa0, 0x6e,
	0x90, 0x7f, 0x26, 0xee, 0x28, 0xb1, 0xc7, 0xcc, 0xd8, 0x95, 0xb2, 0xe4, 0x09, 0xd8, 0xf2, 0x48,
	0x5d, 0xf2, 0x04, 0x16, 0x84, 0x9d, 0x9f, 0x02, 0x79, 0xc6, 0xc5, 0x4d, 0x8b, 0x51, 0x37, 0xbe,
	0x73, 0xcf, 0x9c, 0x7b, 0x34, 0x3e, 0xf7, 0x80, 0xe1, 0xa5, 0xd4, 0x49, 0x39, 0xcb, 0x18, 0x02,
	0x41, 0xf8, 0x29, 0x0d, 0x88, 0x73, 0xba, 0x6f, 0x3e, 0x8c, 0x68, 0x76, 0x92, 0xfb, 0x4e, 0xc0,
	0xe2, 0xbd, 0x88, 0x45, 0x6c, 0x4f, 0x52, 0xfc, 0x7c, 0x2e, 0x3b, 0xd9, 0xc8, 0x93, 0x1a, 0x35,
	0x47, 0x11, 0x63, 0xd1, 0x92, 0x34, 0x2c, 0x12, 0xa7, 0xd9, 0x4a, 0x5d, 0xda, 0xa5, 0x0e, 0xe6,
	0x07, 0xc6, 0x17, 0x09, 0xc9, 0x0e, 0x72, 0xce, 0x69, 0x90, 0x2f, 0xf3, 0xf8, 0x25, 0xf7, 0xd2,
	0x13, 0x4c, 0x44, 0x8a, 0x30, 0xf4, 0x12, 0x16, 0x12, 0x31, 0xd4, 0x26, 0x9d, 0xe9, 0xf6, 0x6c,
	0xdf, 0x69, 0x9e, 0xe1, 0xb4, 0x8f, 0x39, 0x0d, 0xe6, 0x1a, 0x65, 0x61, 0x29, 0x0d, 0xac, 0x0a,
	0x3a, 0x84, 0xde, 0x92, 0x26, 0x0b, 0x31, 0xd4, 0xa5, 0xe6, 0xee, 0x35, 0x35, 0x0f, 0x69, 0xb2,
	0x50, 0x6a, 0x72, 0x1a, 0xab, 0x62, 0xba, 0x00, 0x0d, 0x1b, 0x0d, 0x40, 0xa7, 0xe1, 0x50, 0x9b,
	0x68, 0xd3, 0x8e, 0xdb, 0x2f, 0x0b, 0x4b, 0xa7, 0x21, 0xd6, 0x69, 0x88, 0xee, 0x41, 0x37, 0xf1,
	0x62, 0x32, 0xd4, 0x27, 0xda, 0xd4, 0x70, 0xff, 0x2b, 0x0b, 0x4b, 0xf6, 0x58, 0x7e, 0xcd, 0x39,
	0x74, 0x2b, 0xf5, 0xd6, 0x69, 0x1b, 0xfa, 0x82, 0xe5, 0x3c, 0x50, 0xf3, 0x1d, 0x17, 0xca, 0xc2,
	0xaa, 0x11, 0x5c, 0xd7, 0x8a, 0x93, 0x79, 0x3c, 0x22, 0xd9, 0xb0, 0xd3, 0x70, 0x14, 0x82, 0xeb,
	0x6a, 0x7f, 0xd5, 0x60, 0x74, 0xe5, 0x0f, 0x0f, 0x58, 0xce, 0x05, 0x91, 0x6e, 0x3f, 0x85, 0x9d,
	0xe0, 0x0f, 0x7e, 0x54, 0xbd, 0xb7, 0xb2, 0xdd, 0x70, 0x51, 0x59, 0x58, 0x97, 0x6e, 0xf0, 0xa5,
	0x1e, 0x3d, 0x86, 0xff, 0x03, 0xa9, 0x74, 0x94, 0xc7, 0x3e, 0xe1, 0xd2, 0x5c, 0xc3, 0xbd, 0x55,
	0x16, 0xd6, 0x06, 0x8e, 0x37, 0x3a, 0xfb, 0x39, 0xec, 0xbc, 0x27, 0x9c, 0xce, 0x57, 0xef, 0xd8,
	0x82, 0x24, 0x98, 0x7c, 0x46, 0x33, 0xd8, 0xf6, 0x82, 0x80, 0x08, 0x21, 0x11, 0x69, 0x46, 0x2d,
	0xa3, 0xe0, 0x4f, 0x99, 0x64, 0x5e, 0x24, 0xd9, 0x3e, 0xdc, 0xdc, 0x50, 0x11, 0x69, 0x65, 0x47,
	0x2e, 0x08, 0x7f, 0x75, 0x6e, 0xa7, 0xb4, 0x43, 0x21, 0xb8, 0xae, 0x68, 0x17, 0x0c, 0xee, 0x25,
	0x21, 0x8b, 0xdf, 0x90, 0x55, 0xbd, 0x99, 0x1b, 0x65, 0x61, 0x35, 0x20, 0x6e, 0x8e, 0xb3, 0x2f,
	0x3a, 0xdc, 0xbe, 0xe2, 0x1d, 0x7a, 0x02, 0xdd, 0xb7, 0x34, 0x89, 0xd0, 0xc0, 0x51, 0x21, 0x77,
	0xce, 0x43, 0xee, 0xbc, 0xa8, 0x42, 0x6e, 0xb6, 0xe0, 0xe8, 0x23, 0x0c, 0xfe, 0x1e, 0xb5, 0x56,
	0xa5, 0xfb, 0xd7, 0x8b, 0x29, 0x3a, 0x86, 0x3b, 0x2d, 0x2b, 0x6e, 0x95, 0x7e, 0xf0, 0x4f, 0xe9,
	0x26, 0x1f, 0xb3, 0xd7, 0xd0, 0x93, 0x0e, 0xa3, 0x67, 0xd0, 0x57, 0x86, 0x23, 0xf3, 0xe2, 0xec,
	0xe6, 0x2a, 0xcd, 0x51, 0xeb, 0x9d, 0x48, 0xdd, 0xbb, 0x67, 0x3f, 0xc7, 0x5b, 0x67, 0xeb, 0xb1,
	0xf6, 0x7d, 0x3d, 0xd6, 0x7e, 0xac, 0xc7, 0xda, 0xb7, 0x5f, 0xe3, 0xad, 0xe3, 0x8e, 0x97, 0x52,
	0xbf, 0x2f, 0xdf, 0xf7, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0xbd, 0xc2, 0x22, 0x7f,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorknetCurriculumClient is the client API for WorknetCurriculum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorknetCurriculumClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	WorknetCurriculumGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCurriculumGraphResp, error)
	// `method:"POST"`
	WorknetCurriculumCourse(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCurriculumCourseResp, error)
}

type worknetCurriculumClient struct {
	cc *grpc.ClientConn
}

func NewWorknetCurriculumClient(cc *grpc.ClientConn) WorknetCurriculumClient {
	return &worknetCurriculumClient{cc}
}

func (c *worknetCurriculumClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCurriculum/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCurriculumClient) WorknetCurriculumGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCurriculumGraphResp, error) {
	out := new(WorknetCurriculumGraphResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCurriculum/WorknetCurriculumGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worknetCurriculumClient) WorknetCurriculumCourse(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorknetCurriculumCourseResp, error) {
	out := new(WorknetCurriculumCourseResp)
	err := c.cc.Invoke(ctx, "/service.v1.WorknetCurriculum/WorknetCurriculumCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorknetCurriculumServer is the server API for WorknetCurriculum service.
type WorknetCurriculumServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	WorknetCurriculumGraph(context.Context, *empty.Empty) (*WorknetCurriculumGraphResp, error)
	// `method:"POST"`
	WorknetCurriculumCourse(context.Context, *empty.Empty) (*WorknetCurriculumCourseResp, error)
}

// UnimplementedWorknetCurriculumServer can be embedded to have forward compatible implementations.
type UnimplementedWorknetCurriculumServer struct {
}

func (*UnimplementedWorknetCurriculumServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorknetCurriculumServer) WorknetCurriculumGraph(ctx context.Context, req *empty.Empty) (*WorknetCurriculumGraphResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCurriculumGraph not implemented")
}
func (*UnimplementedWorknetCurriculumServer) WorknetCurriculumCourse(ctx context.Context, req *empty.Empty) (*WorknetCurriculumCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorknetCurriculumCourse not implemented")
}

func RegisterWorknetCurriculumServer(s *grpc.Server, srv WorknetCurriculumServer) {
	s.RegisterService(&_WorknetCurriculum_serviceDesc, srv)
}

func _WorknetCurriculum_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCurriculumServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCurriculum/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCurriculumServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCurriculum_WorknetCurriculumGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCurriculumServer).WorknetCurriculumGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCurriculum/WorknetCurriculumGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCurriculumServer).WorknetCurriculumGraph(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorknetCurriculum_WorknetCurriculumCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorknetCurriculumServer).WorknetCurriculumCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.WorknetCurriculum/WorknetCurriculumCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorknetCurriculumServer).WorknetCurriculumCourse(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorknetCurriculum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.WorknetCurriculum",
	HandlerType: (*WorknetCurriculumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WorknetCurriculum_Ping_Handler,
		},
		{
			MethodName: "WorknetCurriculumGraph",
			Handler:    _WorknetCurriculum_WorknetCurriculumGraph_Handler,
		},
		{
			MethodName: "WorknetCurriculumCourse",
			Handler:    _WorknetCurriculum_WorknetCurriculumCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *WorknetCurriculumGraphResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCurriculumGraphResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCurriculumGraphResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCurriculumGraphResp_Curriculum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCurriculumGraphResp_Curriculum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCurriculumGraphResp_Curriculum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCurriculumGraphResp_Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCurriculumGraphResp_Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCurriculumGraphResp_Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Target != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x18
	}
	if m.Source != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorknetCurriculumCourseResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorknetCurriculumCourseResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorknetCurriculumCourseResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CourseNumber) > 0 {
		for iNdEx := len(m.CourseNumber) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseNumber[iNdEx])
			copy(dAtA[i:], m.CourseNumber[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CourseNumber[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CurriculumName) > 0 {
		for iNdEx := len(m.CurriculumName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CurriculumName[iNdEx])
			copy(dAtA[i:], m.CurriculumName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.CurriculumName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorknetCurriculumGraphResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCurriculumGraphResp_Curriculum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCurriculumGraphResp_Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Source != 0 {
		n += 1 + sovApi(uint64(m.Source))
	}
	if m.Target != 0 {
		n += 1 + sovApi(uint64(m.Target))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorknetCurriculumCourseResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurriculumName) > 0 {
		for _, s := range m.CurriculumName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CourseNumber) > 0 {
		for _, s := range m.CourseNumber {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorknetCurriculumGraphResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCurriculumGraphResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCurriculumGraphResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &WorknetCurriculumGraphResp_Curriculum{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &WorknetCurriculumGraphResp_Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCurriculumGraphResp_Curriculum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Curriculum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Curriculum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCurriculumGraphResp_Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorknetCurriculumCourseResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorknetCurriculumCourseResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorknetCurriculumCourseResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumName = append(m.CurriculumName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseNumber = append(m.CourseNumber, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
