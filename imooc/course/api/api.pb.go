// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImoocCourseScoreSectionResp struct {
	//综合评分
	Comprehensive []int64 `protobuf:"varint,1,rep,packed,name=comprehensive,proto3" json:"comprehensive"`
	//内容实用
	Utility []int64 `protobuf:"varint,2,rep,packed,name=utility,proto3" json:"utility"`
	//简洁易懂
	Concise []int64 `protobuf:"varint,3,rep,packed,name=concise,proto3" json:"concise"`
	//逻辑清晰
	Logic                []int64  `protobuf:"varint,4,rep,packed,name=logic,proto3" json:"logic"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImoocCourseScoreSectionResp) Reset()         { *m = ImoocCourseScoreSectionResp{} }
func (m *ImoocCourseScoreSectionResp) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseScoreSectionResp) ProtoMessage()    {}
func (*ImoocCourseScoreSectionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ImoocCourseScoreSectionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseScoreSectionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseScoreSectionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseScoreSectionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseScoreSectionResp.Merge(m, src)
}
func (m *ImoocCourseScoreSectionResp) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseScoreSectionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseScoreSectionResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseScoreSectionResp proto.InternalMessageInfo

type ImoocCourseAllNumberResp struct {
	//学习总人数
	AllLearnerNumber int64 `protobuf:"varint,1,opt,name=allLearnerNumber,proto3" json:"allLearnerNumber"`
	//评论总数
	AllEvaluationNumber  int64    `protobuf:"varint,2,opt,name=allEvaluationNumber,proto3" json:"allEvaluationNumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImoocCourseAllNumberResp) Reset()         { *m = ImoocCourseAllNumberResp{} }
func (m *ImoocCourseAllNumberResp) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseAllNumberResp) ProtoMessage()    {}
func (*ImoocCourseAllNumberResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ImoocCourseAllNumberResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseAllNumberResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseAllNumberResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseAllNumberResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseAllNumberResp.Merge(m, src)
}
func (m *ImoocCourseAllNumberResp) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseAllNumberResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseAllNumberResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseAllNumberResp proto.InternalMessageInfo

type ImoocCourseSectionResp struct {
	//类别
	Class *ImoocCourseSectionResp_Lists `protobuf:"bytes,1,opt,name=class,proto3" json:"class"`
	//难度
	Difficulty *ImoocCourseSectionResp_Lists `protobuf:"bytes,2,opt,name=difficulty,proto3" json:"difficulty"`
	//时长
	Duration             *ImoocCourseSectionResp_Lists `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ImoocCourseSectionResp) Reset()         { *m = ImoocCourseSectionResp{} }
func (m *ImoocCourseSectionResp) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseSectionResp) ProtoMessage()    {}
func (*ImoocCourseSectionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ImoocCourseSectionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseSectionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseSectionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseSectionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseSectionResp.Merge(m, src)
}
func (m *ImoocCourseSectionResp) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseSectionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseSectionResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseSectionResp proto.InternalMessageInfo

type ImoocCourseSectionResp_Lists struct {
	//名称
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name"`
	//数量
	Number               []int64  `protobuf:"varint,2,rep,packed,name=number,proto3" json:"number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImoocCourseSectionResp_Lists) Reset()         { *m = ImoocCourseSectionResp_Lists{} }
func (m *ImoocCourseSectionResp_Lists) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseSectionResp_Lists) ProtoMessage()    {}
func (*ImoocCourseSectionResp_Lists) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2, 0}
}
func (m *ImoocCourseSectionResp_Lists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseSectionResp_Lists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseSectionResp_Lists.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseSectionResp_Lists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseSectionResp_Lists.Merge(m, src)
}
func (m *ImoocCourseSectionResp_Lists) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseSectionResp_Lists) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseSectionResp_Lists.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseSectionResp_Lists proto.InternalMessageInfo

type ImoocCourseRankReq struct {
	//排行榜位数范围 如 1~15
	Location             []int64  `protobuf:"varint,1,rep,packed,name=location,proto3" json:"location,omitempty" form:"location" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImoocCourseRankReq) Reset()         { *m = ImoocCourseRankReq{} }
func (m *ImoocCourseRankReq) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseRankReq) ProtoMessage()    {}
func (*ImoocCourseRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ImoocCourseRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseRankReq.Merge(m, src)
}
func (m *ImoocCourseRankReq) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseRankReq proto.InternalMessageInfo

type ImoocCourseRankResp struct {
	//课程名
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name"`
	//数量
	Number               []string `protobuf:"bytes,2,rep,name=number,proto3" json:"number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImoocCourseRankResp) Reset()         { *m = ImoocCourseRankResp{} }
func (m *ImoocCourseRankResp) String() string { return proto.CompactTextString(m) }
func (*ImoocCourseRankResp) ProtoMessage()    {}
func (*ImoocCourseRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ImoocCourseRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImoocCourseRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImoocCourseRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImoocCourseRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImoocCourseRankResp.Merge(m, src)
}
func (m *ImoocCourseRankResp) XXX_Size() int {
	return m.Size()
}
func (m *ImoocCourseRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImoocCourseRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImoocCourseRankResp proto.InternalMessageInfo

type GetCoursePageReq struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" form:"query" default:""`
	PageNum              int64    `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty" form:"pageNum" validate:"required"`
	PageSize             int64    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty" form:"pageSize" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCoursePageReq) Reset()         { *m = GetCoursePageReq{} }
func (m *GetCoursePageReq) String() string { return proto.CompactTextString(m) }
func (*GetCoursePageReq) ProtoMessage()    {}
func (*GetCoursePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetCoursePageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoursePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoursePageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoursePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoursePageReq.Merge(m, src)
}
func (m *GetCoursePageReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCoursePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoursePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoursePageReq proto.InternalMessageInfo

type GetCoursePageResp struct {
	PageNum              int64     `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum"`
	PageSize             int64     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	Total                int64     `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	CourseList           []*Course `protobuf:"bytes,4,rep,name=courseList,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetCoursePageResp) Reset()         { *m = GetCoursePageResp{} }
func (m *GetCoursePageResp) String() string { return proto.CompactTextString(m) }
func (*GetCoursePageResp) ProtoMessage()    {}
func (*GetCoursePageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GetCoursePageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoursePageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoursePageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoursePageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoursePageResp.Merge(m, src)
}
func (m *GetCoursePageResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCoursePageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoursePageResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoursePageResp proto.InternalMessageInfo

type Course struct {
	//主键id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	//类别
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class"`
	//难度
	Difficulty string `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty"`
	//简介
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction"`
	//描述
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	//学习人数
	LearnerNumber string `protobuf:"bytes,7,opt,name=learnerNumber,proto3" json:"learnerNumber"`
	//路径
	Path string `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	//时长
	Duration string `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration"`
	//综合评分
	ComprehensiveScore string `protobuf:"bytes,10,opt,name=comprehensiveScore,proto3" json:"comprehensiveScore"`
	//内容实用
	UtilityScore string `protobuf:"bytes,11,opt,name=utilityScore,proto3" json:"utilityScore"`
	//简洁易懂
	ConciseScore string `protobuf:"bytes,12,opt,name=conciseScore,proto3" json:"conciseScore"`
	//逻辑清晰
	LogicScore string `protobuf:"bytes,13,opt,name=logicScore,proto3" json:"logicScore"`
	//评分人数
	EvaluationNumber string `protobuf:"bytes,14,opt,name=evaluationNumber,proto3" json:"evaluationNumber"`
	//链接
	Url string `protobuf:"bytes,15,opt,name=url,proto3" json:"url"`
	//上级连接
	ParentUrl string `protobuf:"bytes,16,opt,name=parentUrl,proto3" json:"parentUrl"`
	//数据爬取时间
	DownloadTime         string   `protobuf:"bytes,17,opt,name=downloadTime,proto3" json:"downloadTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Course) Reset()         { *m = Course{} }
func (m *Course) String() string { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()    {}
func (*Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *Course) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Course.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Course.Merge(m, src)
}
func (m *Course) XXX_Size() int {
	return m.Size()
}
func (m *Course) XXX_DiscardUnknown() {
	xxx_messageInfo_Course.DiscardUnknown(m)
}

var xxx_messageInfo_Course proto.InternalMessageInfo

type VerifyTokenReq struct {
	// 授予的 token
	AccessToken          string   `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenReq) Reset()         { *m = VerifyTokenReq{} }
func (m *VerifyTokenReq) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenReq) ProtoMessage()    {}
func (*VerifyTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *VerifyTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenReq.Merge(m, src)
}
func (m *VerifyTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenReq proto.InternalMessageInfo

type VerifyTokenResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	RandomKey            string   `protobuf:"bytes,2,opt,name=randomKey,proto3" json:"randomKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTokenResp) Reset()         { *m = VerifyTokenResp{} }
func (m *VerifyTokenResp) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenResp) ProtoMessage()    {}
func (*VerifyTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *VerifyTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenResp.Merge(m, src)
}
func (m *VerifyTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ImoocCourseScoreSectionResp)(nil), "service.v1.ImoocCourseScoreSectionResp")
	proto.RegisterType((*ImoocCourseAllNumberResp)(nil), "service.v1.ImoocCourseAllNumberResp")
	proto.RegisterType((*ImoocCourseSectionResp)(nil), "service.v1.ImoocCourseSectionResp")
	proto.RegisterType((*ImoocCourseSectionResp_Lists)(nil), "service.v1.ImoocCourseSectionResp.Lists")
	proto.RegisterType((*ImoocCourseRankReq)(nil), "service.v1.ImoocCourseRankReq")
	proto.RegisterType((*ImoocCourseRankResp)(nil), "service.v1.ImoocCourseRankResp")
	proto.RegisterType((*GetCoursePageReq)(nil), "service.v1.GetCoursePageReq")
	proto.RegisterType((*GetCoursePageResp)(nil), "service.v1.GetCoursePageResp")
	proto.RegisterType((*Course)(nil), "service.v1.Course")
	proto.RegisterType((*VerifyTokenReq)(nil), "service.v1.VerifyTokenReq")
	proto.RegisterType((*VerifyTokenResp)(nil), "service.v1.VerifyTokenResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x5e, 0xdb, 0xb1, 0x13, 0x97, 0xf3, 0xdb, 0xbb, 0xca, 0xce, 0x3a, 0x8b, 0x27, 0x1a, 0x7e,
	0x36, 0x12, 0xc2, 0xab, 0x04, 0x04, 0x52, 0xc4, 0x61, 0xd7, 0xcb, 0x82, 0x02, 0xd1, 0x2a, 0xea,
	0x04, 0x96, 0xe5, 0x82, 0x3a, 0x33, 0x6d, 0xa7, 0x95, 0xf1, 0xf4, 0x64, 0x7e, 0x82, 0xc2, 0x93,
	0x70, 0xe1, 0xcc, 0x83, 0x00, 0xd2, 0x1e, 0x38, 0xf0, 0x00, 0x68, 0x04, 0xe1, 0x36, 0xc7, 0x3c,
	0x01, 0xea, 0xea, 0xb1, 0x67, 0xc6, 0xb1, 0x83, 0x22, 0xed, 0xc5, 0xd3, 0xf5, 0x55, 0x7d, 0xe5,
	0xea, 0xea, 0xae, 0xaa, 0x86, 0x26, 0xf3, 0x45, 0xd7, 0x0f, 0x64, 0x24, 0x09, 0x84, 0x3c, 0x38,
	0x17, 0x36, 0xef, 0x9e, 0x6f, 0xb7, 0x3f, 0x18, 0x88, 0xe8, 0x24, 0x3e, 0xee, 0xda, 0x72, 0xf8,
	0x78, 0x20, 0x07, 0xf2, 0x31, 0x9a, 0x1c, 0xc7, 0x7d, 0x94, 0x50, 0xc0, 0x95, 0xa6, 0xb6, 0x37,
	0x06, 0x52, 0x0e, 0x5c, 0x9e, 0x5b, 0xf1, 0xa1, 0x1f, 0x5d, 0x68, 0xa5, 0xf5, 0x7b, 0x05, 0x36,
	0xf6, 0x86, 0x52, 0xda, 0xcf, 0x64, 0x1c, 0x84, 0xfc, 0xd0, 0x96, 0x01, 0x3f, 0xe4, 0x76, 0x24,
	0xa4, 0x47, 0x79, 0xe8, 0x93, 0x4f, 0x60, 0xc9, 0x96, 0x43, 0x3f, 0xe0, 0x27, 0xdc, 0x0b, 0xc5,
	0x39, 0x37, 0x2a, 0x9b, 0xb5, 0xad, 0x5a, 0x6f, 0x2d, 0x4d, 0xcc, 0xb2, 0x82, 0x96, 0x45, 0xf2,
	0x2e, 0xcc, 0xc7, 0x91, 0x70, 0x45, 0x74, 0x61, 0x54, 0x91, 0xd2, 0x4a, 0x13, 0x73, 0x04, 0xd1,
	0xd1, 0x42, 0x99, 0xd9, 0xd2, 0xb3, 0x45, 0xc8, 0x8d, 0x5a, 0x6e, 0x96, 0x41, 0x74, 0xb4, 0x20,
	0x26, 0xd4, 0x5d, 0x39, 0x10, 0xb6, 0x31, 0x87, 0x46, 0xcd, 0x34, 0x31, 0x35, 0x40, 0xf5, 0xc7,
	0xfa, 0xa5, 0x02, 0x46, 0x61, 0x1f, 0x4f, 0x5d, 0xf7, 0x45, 0x3c, 0x3c, 0xe6, 0x01, 0x6e, 0xe2,
	0x09, 0xac, 0x32, 0xd7, 0xdd, 0xe7, 0x2c, 0xf0, 0x78, 0xa0, 0x71, 0xa3, 0xb2, 0x59, 0xd9, 0xaa,
	0xf5, 0xee, 0xa5, 0x89, 0x79, 0x4d, 0x47, 0xaf, 0x21, 0x64, 0x0f, 0xee, 0x32, 0xd7, 0x7d, 0x7e,
	0xce, 0xdc, 0x98, 0xa9, 0xdc, 0x64, 0x4e, 0xaa, 0xe8, 0xe4, 0x7e, 0x9a, 0x98, 0xd3, 0xd4, 0x74,
	0x1a, 0x68, 0xfd, 0x55, 0x85, 0xf5, 0x62, 0xc6, 0x0b, 0xc9, 0xde, 0x83, 0xba, 0xed, 0xb2, 0x30,
	0xc4, 0xe0, 0x5a, 0x3b, 0x5b, 0xdd, 0xfc, 0xd0, 0xbb, 0xd3, 0x29, 0xdd, 0x7d, 0x11, 0x46, 0xa1,
	0xce, 0x07, 0x52, 0xa9, 0xfe, 0x90, 0x6f, 0x01, 0x1c, 0xd1, 0xef, 0x0b, 0x3b, 0x76, 0xf1, 0x04,
	0x6e, 0xe7, 0x6f, 0x39, 0x4d, 0xcc, 0x02, 0x9f, 0x16, 0xd6, 0x84, 0xc2, 0x82, 0x13, 0x07, 0xb8,
	0x23, 0xa3, 0x76, 0x4b, 0xbf, 0x8b, 0x69, 0x62, 0x8e, 0xd9, 0x74, 0xbc, 0x6a, 0xef, 0x41, 0x1d,
	0x0d, 0xc8, 0x43, 0x98, 0xf3, 0xd8, 0x50, 0xdf, 0xb2, 0x66, 0x6f, 0x21, 0x4d, 0x4c, 0x94, 0x29,
	0xfe, 0x12, 0x0b, 0x1a, 0xde, 0x28, 0xf1, 0xea, 0x1a, 0x40, 0x9a, 0x98, 0x19, 0x42, 0xb3, 0xaf,
	0xf5, 0x0a, 0x48, 0x21, 0x04, 0xca, 0xbc, 0x53, 0xca, 0xcf, 0xc8, 0x33, 0x58, 0x70, 0xa5, 0xad,
	0x83, 0xd6, 0x37, 0xf8, 0xd1, 0x55, 0x62, 0xbe, 0xdd, 0x97, 0xc1, 0x70, 0xd7, 0x1a, 0x69, 0xac,
	0xcd, 0x73, 0xe6, 0x0a, 0x87, 0x45, 0x7c, 0xd7, 0x0a, 0xf8, 0x59, 0x2c, 0x02, 0xee, 0x58, 0x74,
	0x4c, 0xb4, 0x5e, 0xc2, 0xdd, 0x6b, 0xae, 0x43, 0xff, 0x56, 0x31, 0x37, 0xa7, 0xc6, 0xfc, 0x47,
	0x05, 0x56, 0xbf, 0xe0, 0x91, 0xf6, 0x7b, 0xc0, 0x06, 0x5c, 0x85, 0xbc, 0x0d, 0xf5, 0xb3, 0x98,
	0x07, 0x17, 0x78, 0x19, 0x9a, 0xbd, 0x8d, 0xab, 0xc4, 0xbc, 0xaf, 0xe3, 0x45, 0xd8, 0xda, 0x74,
	0x78, 0x9f, 0xc5, 0x6e, 0xb4, 0x6b, 0x59, 0x54, 0x5b, 0x92, 0x27, 0x30, 0xef, 0xb3, 0x01, 0x7f,
	0x11, 0x0f, 0xb3, 0x9b, 0xf9, 0xde, 0x55, 0x62, 0x5a, 0x9a, 0x94, 0x29, 0xa6, 0xef, 0x71, 0x44,
	0x53, 0x79, 0x52, 0xcb, 0x43, 0xf1, 0x23, 0xc7, 0xc3, 0x2d, 0xe5, 0x69, 0xa4, 0x99, 0x91, 0xa7,
	0xb1, 0xfa, 0xd7, 0x0a, 0xac, 0x4d, 0x6c, 0x27, 0xf4, 0x55, 0xa5, 0x8f, 0x82, 0xd3, 0xb5, 0x87,
	0x95, 0x9e, 0x41, 0x79, 0x04, 0x5b, 0x85, 0x08, 0xf4, 0x26, 0xf0, 0xd2, 0x8c, 0xb0, 0xfc, 0x6f,
	0x54, 0x4f, 0x88, 0x64, 0xc4, 0xdc, 0x2c, 0x50, 0xac, 0x01, 0x04, 0xa8, 0xfe, 0x90, 0x4f, 0x01,
	0x6c, 0x8c, 0x41, 0xdd, 0x2d, 0xec, 0x1c, 0xad, 0x1d, 0x52, 0xbc, 0xab, 0x3a, 0x42, 0x7d, 0x64,
	0xca, 0x2d, 0x2d, 0xd8, 0x5b, 0x3f, 0x37, 0xa0, 0xa1, 0x0d, 0xc8, 0x3a, 0x54, 0x85, 0x83, 0x51,
	0xd7, 0x7b, 0x8d, 0x34, 0x31, 0xab, 0xc2, 0xa1, 0x55, 0xe1, 0x8c, 0x4f, 0xbe, 0x8a, 0x27, 0x34,
	0x79, 0xf2, 0xe6, 0xa8, 0x9a, 0x6b, 0xa8, 0xbe, 0x5e, 0xa3, 0xdd, 0x52, 0x8d, 0xce, 0xa1, 0xd5,
	0x4d, 0x95, 0xf7, 0x11, 0x2c, 0x0a, 0x2f, 0x0a, 0xa4, 0x13, 0x63, 0x5d, 0x19, 0x75, 0x64, 0xac,
	0xa6, 0x89, 0x59, 0xc2, 0x69, 0x49, 0x22, 0xdb, 0xd0, 0x72, 0x78, 0x68, 0x07, 0xc2, 0x47, 0x52,
	0x03, 0x49, 0x2b, 0x69, 0x62, 0x16, 0x61, 0x5a, 0x14, 0x54, 0xd3, 0x77, 0x4b, 0xcd, 0x72, 0x1e,
	0x49, 0xd8, 0xf4, 0x4b, 0x0a, 0x5a, 0x16, 0x55, 0x42, 0x7c, 0x16, 0x9d, 0x18, 0x0b, 0x79, 0x42,
	0x94, 0x4c, 0xf1, 0x57, 0x1d, 0xed, 0xb8, 0x73, 0x34, 0xd1, 0x62, 0x46, 0x3f, 0x20, 0x9f, 0x03,
	0x29, 0x4d, 0x13, 0x1c, 0x4b, 0x06, 0x20, 0x67, 0x3d, 0x4d, 0xcc, 0x29, 0x5a, 0x3a, 0x05, 0x53,
	0x19, 0xcb, 0x06, 0x8d, 0xf6, 0xd0, 0xca, 0x33, 0x56, 0xc4, 0x69, 0x49, 0x52, 0xac, 0x6c, 0xee,
	0x68, 0xd6, 0x62, 0xce, 0x2a, 0xe2, 0xb4, 0x24, 0xa9, 0xd3, 0xc4, 0x51, 0xa4, 0x39, 0x4b, 0xf9,
	0x69, 0xe6, 0x28, 0x2d, 0xac, 0xd5, 0x50, 0xe2, 0x93, 0xf3, 0x64, 0x19, 0x59, 0x38, 0x94, 0x26,
	0x75, 0xf4, 0x1a, 0x42, 0x1e, 0x40, 0x2d, 0x0e, 0x5c, 0x63, 0x05, 0x49, 0xf3, 0x69, 0x62, 0x2a,
	0x91, 0xaa, 0x1f, 0xf2, 0x3e, 0x34, 0x7d, 0x16, 0x70, 0x2f, 0xfa, 0x3a, 0x70, 0x8d, 0x55, 0x34,
	0x58, 0x4a, 0x13, 0x33, 0x07, 0x69, 0xbe, 0x54, 0xfb, 0x75, 0xe4, 0x0f, 0x9e, 0x2b, 0x99, 0x73,
	0x24, 0x86, 0xdc, 0x58, 0xcb, 0xf7, 0x5b, 0xc4, 0x69, 0x49, 0xb2, 0x3e, 0x83, 0xe5, 0x6f, 0x78,
	0x20, 0xfa, 0x17, 0x47, 0xf2, 0x94, 0x7b, 0xaa, 0x63, 0xed, 0x40, 0x8b, 0xd9, 0x36, 0x0f, 0x43,
	0x44, 0xb2, 0xbe, 0x85, 0x6e, 0x34, 0xfc, 0x7d, 0x84, 0x96, 0x45, 0x23, 0xeb, 0x18, 0x56, 0x4a,
	0x5e, 0x42, 0x5f, 0x75, 0xcc, 0x38, 0xe4, 0xc1, 0x9e, 0x93, 0xf5, 0x09, 0xec, 0x98, 0x1a, 0xa1,
	0xd9, 0x57, 0xed, 0x2f, 0x60, 0x9e, 0x23, 0x87, 0x5f, 0xf1, 0x8b, 0xac, 0xfc, 0x70, 0x7f, 0x63,
	0x90, 0xe6, 0xcb, 0x9d, 0xdf, 0xe6, 0xa0, 0x55, 0x68, 0xdc, 0xe4, 0x63, 0x98, 0x3b, 0x10, 0xde,
	0x80, 0xac, 0x77, 0xf5, 0xcb, 0xa8, 0x3b, 0x7a, 0x19, 0x75, 0x9f, 0xab, 0x97, 0x51, 0x7b, 0x06,
	0x4e, 0x0e, 0x61, 0x75, 0xf2, 0xa9, 0x34, 0xd3, 0xc7, 0xa3, 0x59, 0x33, 0x71, 0xf2, 0x81, 0x75,
	0x04, 0xf7, 0xa6, 0xbd, 0x5b, 0x66, 0x3a, 0x7e, 0x67, 0x86, 0xe3, 0xf2, 0x8b, 0xe7, 0xa0, 0x34,
	0x05, 0xb3, 0xff, 0x9b, 0xe9, 0xd3, 0xfa, 0xff, 0x01, 0x4e, 0x5e, 0x96, 0xe2, 0xd4, 0xd7, 0x99,
	0x79, 0xa7, 0xa4, 0x33, 0x83, 0x9b, 0x4d, 0xde, 0xb6, 0x79, 0xa3, 0x3e, 0xf4, 0xc9, 0xab, 0xd2,
	0x73, 0x28, 0x7b, 0x76, 0xbd, 0x19, 0xd7, 0xfb, 0xb0, 0x54, 0x9a, 0x43, 0xe4, 0x61, 0x91, 0x31,
	0x39, 0x71, 0xdb, 0x6f, 0xdd, 0xa0, 0x0d, 0xfd, 0x9d, 0x2f, 0xa1, 0x8e, 0x97, 0x94, 0x3c, 0x85,
	0x86, 0xbe, 0xb3, 0xa4, 0x5d, 0x64, 0x94, 0xab, 0xa1, 0xbd, 0x31, 0x53, 0x17, 0xfa, 0xbd, 0x07,
	0xaf, 0xff, 0xe9, 0xdc, 0x79, 0x7d, 0xd9, 0xa9, 0xfc, 0x79, 0xd9, 0xa9, 0xfc, 0x7d, 0xd9, 0xa9,
	0xfc, 0xf4, 0x6f, 0xe7, 0xce, 0x77, 0x35, 0xe6, 0x8b, 0xe3, 0x06, 0x1e, 0xce, 0x87, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x72, 0x95, 0x6f, 0x22, 0xfd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImoocCourseClient is the client API for ImoocCourse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImoocCourseClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// `method:"POST"`
	ImoocCourseScore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseScoreSectionResp, error)
	// `method:"POST"`
	ImoocCourseAllNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseAllNumberResp, error)
	// `method:"POST"`
	ImoocCourseSection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseSectionResp, error)
	// `method:"POST"`
	ImoocCourseScoreRank(ctx context.Context, in *ImoocCourseRankReq, opts ...grpc.CallOption) (*ImoocCourseRankResp, error)
	// `method:"POST"`
	ImoocCourseLearnerRank(ctx context.Context, in *ImoocCourseRankReq, opts ...grpc.CallOption) (*ImoocCourseRankResp, error)
	// `method:"POST"`
	GetCoursePage(ctx context.Context, in *GetCoursePageReq, opts ...grpc.CallOption) (*GetCoursePageResp, error)
}

type imoocCourseClient struct {
	cc *grpc.ClientConn
}

func NewImoocCourseClient(cc *grpc.ClientConn) ImoocCourseClient {
	return &imoocCourseClient{cc}
}

func (c *imoocCourseClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) ImoocCourseScore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseScoreSectionResp, error) {
	out := new(ImoocCourseScoreSectionResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/ImoocCourseScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) ImoocCourseAllNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseAllNumberResp, error) {
	out := new(ImoocCourseAllNumberResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/ImoocCourseAllNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) ImoocCourseSection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImoocCourseSectionResp, error) {
	out := new(ImoocCourseSectionResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/ImoocCourseSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) ImoocCourseScoreRank(ctx context.Context, in *ImoocCourseRankReq, opts ...grpc.CallOption) (*ImoocCourseRankResp, error) {
	out := new(ImoocCourseRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/ImoocCourseScoreRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) ImoocCourseLearnerRank(ctx context.Context, in *ImoocCourseRankReq, opts ...grpc.CallOption) (*ImoocCourseRankResp, error) {
	out := new(ImoocCourseRankResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/ImoocCourseLearnerRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imoocCourseClient) GetCoursePage(ctx context.Context, in *GetCoursePageReq, opts ...grpc.CallOption) (*GetCoursePageResp, error) {
	out := new(GetCoursePageResp)
	err := c.cc.Invoke(ctx, "/service.v1.ImoocCourse/GetCoursePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImoocCourseServer is the server API for ImoocCourse service.
type ImoocCourseServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// `method:"POST"`
	ImoocCourseScore(context.Context, *empty.Empty) (*ImoocCourseScoreSectionResp, error)
	// `method:"POST"`
	ImoocCourseAllNumber(context.Context, *empty.Empty) (*ImoocCourseAllNumberResp, error)
	// `method:"POST"`
	ImoocCourseSection(context.Context, *empty.Empty) (*ImoocCourseSectionResp, error)
	// `method:"POST"`
	ImoocCourseScoreRank(context.Context, *ImoocCourseRankReq) (*ImoocCourseRankResp, error)
	// `method:"POST"`
	ImoocCourseLearnerRank(context.Context, *ImoocCourseRankReq) (*ImoocCourseRankResp, error)
	// `method:"POST"`
	GetCoursePage(context.Context, *GetCoursePageReq) (*GetCoursePageResp, error)
}

// UnimplementedImoocCourseServer can be embedded to have forward compatible implementations.
type UnimplementedImoocCourseServer struct {
}

func (*UnimplementedImoocCourseServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedImoocCourseServer) ImoocCourseScore(ctx context.Context, req *empty.Empty) (*ImoocCourseScoreSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImoocCourseScore not implemented")
}
func (*UnimplementedImoocCourseServer) ImoocCourseAllNumber(ctx context.Context, req *empty.Empty) (*ImoocCourseAllNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImoocCourseAllNumber not implemented")
}
func (*UnimplementedImoocCourseServer) ImoocCourseSection(ctx context.Context, req *empty.Empty) (*ImoocCourseSectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImoocCourseSection not implemented")
}
func (*UnimplementedImoocCourseServer) ImoocCourseScoreRank(ctx context.Context, req *ImoocCourseRankReq) (*ImoocCourseRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImoocCourseScoreRank not implemented")
}
func (*UnimplementedImoocCourseServer) ImoocCourseLearnerRank(ctx context.Context, req *ImoocCourseRankReq) (*ImoocCourseRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImoocCourseLearnerRank not implemented")
}
func (*UnimplementedImoocCourseServer) GetCoursePage(ctx context.Context, req *GetCoursePageReq) (*GetCoursePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursePage not implemented")
}

func RegisterImoocCourseServer(s *grpc.Server, srv ImoocCourseServer) {
	s.RegisterService(&_ImoocCourse_serviceDesc, srv)
}

func _ImoocCourse_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_ImoocCourseScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).ImoocCourseScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/ImoocCourseScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).ImoocCourseScore(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_ImoocCourseAllNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).ImoocCourseAllNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/ImoocCourseAllNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).ImoocCourseAllNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_ImoocCourseSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).ImoocCourseSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/ImoocCourseSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).ImoocCourseSection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_ImoocCourseScoreRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImoocCourseRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).ImoocCourseScoreRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/ImoocCourseScoreRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).ImoocCourseScoreRank(ctx, req.(*ImoocCourseRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_ImoocCourseLearnerRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImoocCourseRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).ImoocCourseLearnerRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/ImoocCourseLearnerRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).ImoocCourseLearnerRank(ctx, req.(*ImoocCourseRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImoocCourse_GetCoursePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImoocCourseServer).GetCoursePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ImoocCourse/GetCoursePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImoocCourseServer).GetCoursePage(ctx, req.(*GetCoursePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImoocCourse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.ImoocCourse",
	HandlerType: (*ImoocCourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ImoocCourse_Ping_Handler,
		},
		{
			MethodName: "ImoocCourseScore",
			Handler:    _ImoocCourse_ImoocCourseScore_Handler,
		},
		{
			MethodName: "ImoocCourseAllNumber",
			Handler:    _ImoocCourse_ImoocCourseAllNumber_Handler,
		},
		{
			MethodName: "ImoocCourseSection",
			Handler:    _ImoocCourse_ImoocCourseSection_Handler,
		},
		{
			MethodName: "ImoocCourseScoreRank",
			Handler:    _ImoocCourse_ImoocCourseScoreRank_Handler,
		},
		{
			MethodName: "ImoocCourseLearnerRank",
			Handler:    _ImoocCourse_ImoocCourseLearnerRank_Handler,
		},
		{
			MethodName: "GetCoursePage",
			Handler:    _ImoocCourse_GetCoursePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Verify(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, "/service.v1.Token/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// `method:"POST" internal:"true"`
	Verify(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) Verify(ctx context.Context, req *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Token/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Verify(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Token_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ImoocCourseScoreSectionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseScoreSectionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseScoreSectionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Logic) > 0 {
		dAtA2 := make([]byte, len(m.Logic)*10)
		var j1 int
		for _, num1 := range m.Logic {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Concise) > 0 {
		dAtA4 := make([]byte, len(m.Concise)*10)
		var j3 int
		for _, num1 := range m.Concise {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Utility) > 0 {
		dAtA6 := make([]byte, len(m.Utility)*10)
		var j5 int
		for _, num1 := range m.Utility {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Comprehensive) > 0 {
		dAtA8 := make([]byte, len(m.Comprehensive)*10)
		var j7 int
		for _, num1 := range m.Comprehensive {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImoocCourseAllNumberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseAllNumberResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseAllNumberResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllEvaluationNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AllEvaluationNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.AllLearnerNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AllLearnerNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImoocCourseSectionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseSectionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseSectionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Difficulty != nil {
		{
			size, err := m.Difficulty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Class != nil {
		{
			size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImoocCourseSectionResp_Lists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseSectionResp_Lists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseSectionResp_Lists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		dAtA13 := make([]byte, len(m.Number)*10)
		var j12 int
		for _, num1 := range m.Number {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintApi(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImoocCourseRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseRankReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseRankReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		dAtA15 := make([]byte, len(m.Location)*10)
		var j14 int
		for _, num1 := range m.Location {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintApi(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImoocCourseRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImoocCourseRankResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImoocCourseRankResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		for iNdEx := len(m.Number) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Number[iNdEx])
			copy(dAtA[i:], m.Number[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Number[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCoursePageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoursePageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoursePageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCoursePageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoursePageResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoursePageResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CourseList) > 0 {
		for iNdEx := len(m.CourseList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CourseList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Course) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Course) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Course) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DownloadTime) > 0 {
		i -= len(m.DownloadTime)
		copy(dAtA[i:], m.DownloadTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DownloadTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ParentUrl) > 0 {
		i -= len(m.ParentUrl)
		copy(dAtA[i:], m.ParentUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.EvaluationNumber) > 0 {
		i -= len(m.EvaluationNumber)
		copy(dAtA[i:], m.EvaluationNumber)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EvaluationNumber)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.LogicScore) > 0 {
		i -= len(m.LogicScore)
		copy(dAtA[i:], m.LogicScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogicScore)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ConciseScore) > 0 {
		i -= len(m.ConciseScore)
		copy(dAtA[i:], m.ConciseScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConciseScore)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UtilityScore) > 0 {
		i -= len(m.UtilityScore)
		copy(dAtA[i:], m.UtilityScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UtilityScore)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ComprehensiveScore) > 0 {
		i -= len(m.ComprehensiveScore)
		copy(dAtA[i:], m.ComprehensiveScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ComprehensiveScore)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LearnerNumber) > 0 {
		i -= len(m.LearnerNumber)
		copy(dAtA[i:], m.LearnerNumber)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LearnerNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Difficulty) > 0 {
		i -= len(m.Difficulty)
		copy(dAtA[i:], m.Difficulty)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Difficulty)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Class) > 0 {
		i -= len(m.Class)
		copy(dAtA[i:], m.Class)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Class)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RandomKey) > 0 {
		i -= len(m.RandomKey)
		copy(dAtA[i:], m.RandomKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RandomKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImoocCourseScoreSectionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comprehensive) > 0 {
		l = 0
		for _, e := range m.Comprehensive {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Utility) > 0 {
		l = 0
		for _, e := range m.Utility {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Concise) > 0 {
		l = 0
		for _, e := range m.Concise {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Logic) > 0 {
		l = 0
		for _, e := range m.Logic {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImoocCourseAllNumberResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllLearnerNumber != 0 {
		n += 1 + sovApi(uint64(m.AllLearnerNumber))
	}
	if m.AllEvaluationNumber != 0 {
		n += 1 + sovApi(uint64(m.AllEvaluationNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImoocCourseSectionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != nil {
		l = m.Class.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Difficulty != nil {
		l = m.Difficulty.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImoocCourseSectionResp_Lists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Number) > 0 {
		l = 0
		for _, e := range m.Number {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImoocCourseRankReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Location) > 0 {
		l = 0
		for _, e := range m.Location {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImoocCourseRankResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Number) > 0 {
		for _, s := range m.Number {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoursePageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoursePageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.CourseList) > 0 {
		for _, e := range m.CourseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Course) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Difficulty)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LearnerNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ComprehensiveScore)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UtilityScore)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ConciseScore)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LogicScore)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EvaluationNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ParentUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.DownloadTime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.RandomKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImoocCourseScoreSectionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImoocCourseScoreSectionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImoocCourseScoreSectionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Comprehensive = append(m.Comprehensive, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Comprehensive) == 0 {
					m.Comprehensive = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Comprehensive = append(m.Comprehensive, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Comprehensive", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Utility = append(m.Utility, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Utility) == 0 {
					m.Utility = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Utility = append(m.Utility, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Utility", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Concise = append(m.Concise, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Concise) == 0 {
					m.Concise = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Concise = append(m.Concise, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Concise", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Logic = append(m.Logic, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Logic) == 0 {
					m.Logic = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Logic = append(m.Logic, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Logic", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImoocCourseAllNumberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImoocCourseAllNumberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImoocCourseAllNumberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLearnerNumber", wireType)
			}
			m.AllLearnerNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllLearnerNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEvaluationNumber", wireType)
			}
			m.AllEvaluationNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllEvaluationNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImoocCourseSectionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImoocCourseSectionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImoocCourseSectionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Class == nil {
				m.Class = &ImoocCourseSectionResp_Lists{}
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Difficulty == nil {
				m.Difficulty = &ImoocCourseSectionResp_Lists{}
			}
			if err := m.Difficulty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &ImoocCourseSectionResp_Lists{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImoocCourseSectionResp_Lists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Number = append(m.Number, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Number) == 0 {
					m.Number = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Number = append(m.Number, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImoocCourseRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImoocCourseRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImoocCourseRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Location = append(m.Location, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Location) == 0 {
					m.Location = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Location = append(m.Location, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImoocCourseRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImoocCourseRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImoocCourseRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = append(m.Number, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoursePageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoursePageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoursePageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoursePageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoursePageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoursePageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseList = append(m.CourseList, &Course{})
			if err := m.CourseList[len(m.CourseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Course) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difficulty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearnerNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LearnerNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComprehensiveScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComprehensiveScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UtilityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConciseScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConciseScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
