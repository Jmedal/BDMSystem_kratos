// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathFinancePing = "/service.v1.Finance/Ping"
var PathFinanceGetProjectPage = "/service.v1.Finance/GetProjectPage"
var PathFinanceAddProject = "/service.v1.Finance/AddProject"
var PathFinanceUpdateProject = "/service.v1.Finance/UpdateProject"
var PathFinanceTerminationProject = "/service.v1.Finance/TerminationProject"
var PathFinanceRestartProject = "/service.v1.Finance/RestartProject"
var PathFinanceGetBillPage = "/service.v1.Finance/GetBillPage"
var PathFinanceAddBill = "/service.v1.Finance/AddBill"
var PathFinanceUpdateBill = "/service.v1.Finance/UpdateBill"
var PathFinanceDeleteBill = "/service.v1.Finance/DeleteBill"

var PathAccountGetUserName = "/service.v1.Account/GetUserName"

var PathTokenVerify = "/service.v1.Token/Verify"

// FinanceBMServer is the server API for Finance service.
type FinanceBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `method:"POST"`
	GetProjectPage(ctx context.Context, req *GetProjectPageReq) (resp *GetProjectPageResp, err error)

	// `method:"POST"`
	AddProject(ctx context.Context, req *AddProjectReq) (resp *AddProjectResp, err error)

	// `method:"POST"`
	UpdateProject(ctx context.Context, req *UpdateProjectReq) (resp *UpdateProjectResp, err error)

	// `method:"POST"`
	TerminationProject(ctx context.Context, req *TerminationProjectReq) (resp *TerminationProjectResp, err error)

	// `method:"POST"`
	RestartProject(ctx context.Context, req *RestartProjectReq) (resp *RestartProjectResp, err error)

	// `method:"POST"`
	GetBillPage(ctx context.Context, req *GetBillPageReq) (resp *GetBillPageResp, err error)

	// `method:"POST"`
	AddBill(ctx context.Context, req *AddBillReq) (resp *AddBillResp, err error)

	// `method:"POST"`
	UpdateBill(ctx context.Context, req *UpdateBillReq) (resp *UpdateBillResp, err error)

	// `method:"POST"`
	DeleteBill(ctx context.Context, req *DeleteBillReq) (resp *DeleteBillResp, err error)
}

var FinanceSvc FinanceBMServer

func financePing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.Ping(c, p)
	c.JSON(resp, err)
}

func financeGetProjectPage(c *bm.Context) {
	p := new(GetProjectPageReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.GetProjectPage(c, p)
	c.JSON(resp, err)
}

func financeAddProject(c *bm.Context) {
	p := new(AddProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.AddProject(c, p)
	c.JSON(resp, err)
}

func financeUpdateProject(c *bm.Context) {
	p := new(UpdateProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.UpdateProject(c, p)
	c.JSON(resp, err)
}

func financeTerminationProject(c *bm.Context) {
	p := new(TerminationProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.TerminationProject(c, p)
	c.JSON(resp, err)
}

func financeRestartProject(c *bm.Context) {
	p := new(RestartProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.RestartProject(c, p)
	c.JSON(resp, err)
}

func financeGetBillPage(c *bm.Context) {
	p := new(GetBillPageReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.GetBillPage(c, p)
	c.JSON(resp, err)
}

func financeAddBill(c *bm.Context) {
	p := new(AddBillReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.AddBill(c, p)
	c.JSON(resp, err)
}

func financeUpdateBill(c *bm.Context) {
	p := new(UpdateBillReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.UpdateBill(c, p)
	c.JSON(resp, err)
}

func financeDeleteBill(c *bm.Context) {
	p := new(DeleteBillReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FinanceSvc.DeleteBill(c, p)
	c.JSON(resp, err)
}

// RegisterFinanceBMServer Register the blademaster route
func RegisterFinanceBMServer(e *bm.Engine, server FinanceBMServer) {
	FinanceSvc = server
	e.GET("/service.v1.Finance/Ping", financePing)
	e.POST("/service.v1.Finance/GetProjectPage", financeGetProjectPage)
	e.POST("/service.v1.Finance/AddProject", financeAddProject)
	e.POST("/service.v1.Finance/UpdateProject", financeUpdateProject)
	e.POST("/service.v1.Finance/TerminationProject", financeTerminationProject)
	e.POST("/service.v1.Finance/RestartProject", financeRestartProject)
	e.POST("/service.v1.Finance/GetBillPage", financeGetBillPage)
	e.POST("/service.v1.Finance/AddBill", financeAddBill)
	e.POST("/service.v1.Finance/UpdateBill", financeUpdateBill)
	e.POST("/service.v1.Finance/DeleteBill", financeDeleteBill)
}

// AccountBMServer is the server API for Account service.
type AccountBMServer interface {
	// `method:"POST"`
	GetUserName(ctx context.Context, req *GetUserNameReq) (resp *GetUserNameResp, err error)
}

var AccountSvc AccountBMServer

func accountGetUserName(c *bm.Context) {
	p := new(GetUserNameReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetUserName(c, p)
	c.JSON(resp, err)
}

// RegisterAccountBMServer Register the blademaster route
func RegisterAccountBMServer(e *bm.Engine, server AccountBMServer) {
	AccountSvc = server
	e.POST("/service.v1.Account/GetUserName", accountGetUserName)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
