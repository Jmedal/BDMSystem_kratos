// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathMenuPing = "/service.v1.Menu/Ping"
var PathMenuGetMenuList = "/service.v1.Menu/GetMenuList"
var PathMenuAddMenu = "/service.v1.Menu/AddMenu"
var PathMenuUpdateMenu = "/service.v1.Menu/UpdateMenu"
var PathMenuDeleteMenu = "/service.v1.Menu/DeleteMenu"
var PathMenuGetMenus = "/service.v1.Menu/GetMenus"
var PathMenuGetMenuOptions = "/service.v1.Menu/GetMenuOptions"

var PathTokenVerify = "/service.v1.Token/Verify"

// MenuBMServer is the server API for Menu service.
type MenuBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `method:"POST"`
	GetMenuList(ctx context.Context, req *google_protobuf1.Empty) (resp *GetMenuListResp, err error)

	// `method:"POST"`
	AddMenu(ctx context.Context, req *AddMenuReq) (resp *AddMenuResp, err error)

	// `method:"POST"`
	UpdateMenu(ctx context.Context, req *UpdateMenuReq) (resp *UpdateMenuResp, err error)

	// `method:"POST"`
	DeleteMenu(ctx context.Context, req *DeleteMenuReq) (resp *DeleteMenuResp, err error)

	// `method:"POST"`
	GetMenus(ctx context.Context, req *google_protobuf1.Empty) (resp *GetMenusResp, err error)

	// `method:"POST"`
	GetMenuOptions(ctx context.Context, req *GetMenuOptionsReq) (resp *GetMenuOptionsResp, err error)
}

var MenuSvc MenuBMServer

func menuPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.Ping(c, p)
	c.JSON(resp, err)
}

func menuGetMenuList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.GetMenuList(c, p)
	c.JSON(resp, err)
}

func menuAddMenu(c *bm.Context) {
	p := new(AddMenuReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.AddMenu(c, p)
	c.JSON(resp, err)
}

func menuUpdateMenu(c *bm.Context) {
	p := new(UpdateMenuReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.UpdateMenu(c, p)
	c.JSON(resp, err)
}

func menuDeleteMenu(c *bm.Context) {
	p := new(DeleteMenuReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.DeleteMenu(c, p)
	c.JSON(resp, err)
}

func menuGetMenus(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.GetMenus(c, p)
	c.JSON(resp, err)
}

func menuGetMenuOptions(c *bm.Context) {
	p := new(GetMenuOptionsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := MenuSvc.GetMenuOptions(c, p)
	c.JSON(resp, err)
}

// RegisterMenuBMServer Register the blademaster route
func RegisterMenuBMServer(e *bm.Engine, server MenuBMServer) {
	MenuSvc = server
	e.GET("/service.v1.Menu/Ping", menuPing)
	e.POST("/service.v1.Menu/GetMenuList", menuGetMenuList)
	e.POST("/service.v1.Menu/AddMenu", menuAddMenu)
	e.POST("/service.v1.Menu/UpdateMenu", menuUpdateMenu)
	e.POST("/service.v1.Menu/DeleteMenu", menuDeleteMenu)
	e.POST("/service.v1.Menu/GetMenus", menuGetMenus)
	e.POST("/service.v1.Menu/GetMenuOptions", menuGetMenuOptions)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
