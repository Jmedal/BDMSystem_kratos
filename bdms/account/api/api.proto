// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package service.v1;

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

message LoginReq {
    //帐号
    string account = 1 [(gogoproto.moretags) = 'form:"account" validate:"required"'];
    //密码
    string password = 2 [(gogoproto.moretags) = 'form:"password" validate:"required"'];
    //保存密码 保存：1，不保存：2
    string save = 3 [(gogoproto.moretags) = 'form:"save" validate:"required"'];
}

message LoginResp {
    //令牌
    string accessToken = 1 [(gogoproto.jsontag) = 'access_token'];
    //密钥
    string randomKey = 2 [(gogoproto.jsontag) = 'randomKey'];
    //结果
    string result = 3 [(gogoproto.jsontag) = 'result'];

    //int64 roleId = 4 [(gogoproto.jsontag) = 'roleId'];
}

message GetUserListReq {
    string search = 1 [(gogoproto.moretags) = 'form:"search" default:""'];
}

message GetUserListResp {
    repeated UserInfo userList = 1 [(gogoproto.jsontag) = 'userList'];
}

message UserInfo {
    int64 id = 1 [(gogoproto.jsontag) = 'id'];

    string avatar = 2 [(gogoproto.jsontag) = 'avatar'];

    string account = 3 [(gogoproto.jsontag) = 'account'];

    string password = 4 [(gogoproto.jsontag) = 'password'];

    string name = 5 [(gogoproto.jsontag) = 'name'];

    int64 roleId = 6 [(gogoproto.jsontag) = 'roleId'];

    string birthday = 7 [(gogoproto.jsontag) = 'birthday'];

    string sex = 8 [(gogoproto.jsontag) = 'sex'];

    string email = 9 [(gogoproto.jsontag) = 'email'];

    string phone = 10 [(gogoproto.jsontag) = 'phone'];

    int32 status = 11 [(gogoproto.jsontag) = 'status'];

    string createTime = 12 [(gogoproto.jsontag) = 'createTime'];
}

message AddUserReq {
    User user = 1  [(gogoproto.moretags) = 'form:"user" validate:"required"'];
}

message AddUserResp {
    string result = 1 [(gogoproto.jsontag) = 'result'];
}

message UpdateUserReq {
    int64 id = 1 [(gogoproto.moretags) = 'form:"id" validate:"required"'];

    User user = 2  [(gogoproto.moretags) = 'form:"user" validate:"required"'];
}

message UpdateUserResp {
    string result = 1 [(gogoproto.jsontag) = 'result'];
}

message DeleteUserReq {
    int64 id = 1 [(gogoproto.moretags) = 'form:"id" validate:"required"'];
}

message DeleteUserResp {
    string result = 1 [(gogoproto.jsontag) = 'result'];
}

message SetUserRoleReq {
    int64 userId = 1 [(gogoproto.moretags) = 'form:"userId" validate:"required"'];

    int64 roleId = 2 [(gogoproto.moretags) = 'form:"roleId" validate:"required"'];
}

message SetUserRoleResp {
    string result = 1 [(gogoproto.jsontag) = 'result'];
}

message User {
    string avatar = 1 [(gogoproto.moretags) = 'form:"avatar" validate:"required" default:"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png"'];

    string account = 2 [(gogoproto.moretags) = 'form:"account" validate:"required"'];

    string password = 3 [(gogoproto.moretags) = 'form:"password" validate:"required"'];

    string name = 4 [(gogoproto.moretags) = 'form:"name" validate:"required"'];

    string birthday = 5 [(gogoproto.moretags) = 'form:"birthday" validate:"required"'];

    string sex = 6 [(gogoproto.moretags) = 'form:"sex" validate:"required"'];

    string email = 7 [(gogoproto.moretags) = 'form:"email" validate:"required"'];

    string phone = 8 [(gogoproto.moretags) = 'form:"phone" validate:"required"'];

    int32 status = 9 [(gogoproto.moretags) = 'form:"status" validate:"required"'];

    string createTime = 10 [(gogoproto.moretags) = 'form:"createTime" validate:"required"'];
}

service Account {
    // `method:"POST"`
    rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
    //用户登录
    // `method:"POST"`
    rpc Login (LoginReq) returns (LoginResp);

    // `method:"POST"`
    rpc GetUserList(GetUserListReq) returns (GetUserListResp);

    // `method:"POST"`
    rpc AddUser(AddUserReq) returns (AddUserResp);

    // `method:"POST"`
    rpc UpdateUser(UpdateUserReq) returns (UpdateUserResp);

    // `method:"POST"`
    rpc DeleteUser(DeleteUserReq) returns (DeleteUserResp);

    // `method:"POST"`
    rpc SetUserRole(SetUserRoleReq) returns (SetUserRoleResp);

}


message NewTokenReq {
    int64 userId = 1 [(gogoproto.moretags) = 'form:"userId" validate:"required"'];

    // 操作人
    string operator = 2 [(gogoproto.moretags) = 'form:"operator" validate:"required"'];

    //过期时间
    int64 expire = 3 [(gogoproto.moretags) = 'form:"expire" validate:"required"'];
}
message NewTokenResp {
    // 授予的 token
    string accessToken = 1 [(gogoproto.jsontag) = 'access_token'];

    // 授予token唯一对应的randomKey
    string randomKey = 2 [(gogoproto.jsontag) = 'randomKey'];
}

message VerifyTokenReq {
    // 授予的 token
    string accessToken = 1 [(gogoproto.jsontag) = 'access_token'];
}
message VerifyTokenResp {
    int64 userId = 1 [(gogoproto.jsontag) = 'userId'];

    string randomKey = 2 [(gogoproto.jsontag) = 'randomKey'];
}

service Token {
    rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
    // Request for a token for upload.
    // `method:"POST" internal:"true"`
    rpc Request (NewTokenReq) returns (NewTokenResp);

    // `method:"POST" internal:"true"`
    rpc Verify (VerifyTokenReq) returns (VerifyTokenResp);
}



