// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAccountPing = "/service.v1.Account/Ping"
var PathAccountLogin = "/service.v1.Account/Login"
var PathAccountGetUserList = "/service.v1.Account/GetUserList"
var PathAccountAddUser = "/service.v1.Account/AddUser"
var PathAccountUpdateUser = "/service.v1.Account/UpdateUser"
var PathAccountDeleteUser = "/service.v1.Account/DeleteUser"
var PathAccountSetUserRole = "/service.v1.Account/SetUserRole"

var PathTokenPing = "/service.v1.Token/Ping"
var PathTokenRequest = "/service.v1.Token/Request"
var PathTokenVerify = "/service.v1.Token/Verify"

// AccountBMServer is the server API for Account service.
type AccountBMServer interface {
	// `method:"POST"`
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 用户登录
	// `method:"POST"`
	Login(ctx context.Context, req *LoginReq) (resp *LoginResp, err error)

	// `method:"POST"`
	GetUserList(ctx context.Context, req *GetUserListReq) (resp *GetUserListResp, err error)

	// `method:"POST"`
	AddUser(ctx context.Context, req *AddUserReq) (resp *AddUserResp, err error)

	// `method:"POST"`
	UpdateUser(ctx context.Context, req *UpdateUserReq) (resp *UpdateUserResp, err error)

	// `method:"POST"`
	DeleteUser(ctx context.Context, req *DeleteUserReq) (resp *DeleteUserResp, err error)

	// `method:"POST"`
	SetUserRole(ctx context.Context, req *SetUserRoleReq) (resp *SetUserRoleResp, err error)
}

var AccountSvc AccountBMServer

func accountPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.Ping(c, p)
	c.JSON(resp, err)
}

func accountLogin(c *bm.Context) {
	p := new(LoginReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.Login(c, p)
	c.JSON(resp, err)
}

func accountGetUserList(c *bm.Context) {
	p := new(GetUserListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetUserList(c, p)
	c.JSON(resp, err)
}

func accountAddUser(c *bm.Context) {
	p := new(AddUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.AddUser(c, p)
	c.JSON(resp, err)
}

func accountUpdateUser(c *bm.Context) {
	p := new(UpdateUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.UpdateUser(c, p)
	c.JSON(resp, err)
}

func accountDeleteUser(c *bm.Context) {
	p := new(DeleteUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.DeleteUser(c, p)
	c.JSON(resp, err)
}

func accountSetUserRole(c *bm.Context) {
	p := new(SetUserRoleReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.SetUserRole(c, p)
	c.JSON(resp, err)
}

// RegisterAccountBMServer Register the blademaster route
func RegisterAccountBMServer(e *bm.Engine, server AccountBMServer) {
	AccountSvc = server
	e.POST("/service.v1.Account/Ping", accountPing)
	e.POST("/service.v1.Account/Login", accountLogin)
	e.POST("/service.v1.Account/GetUserList", accountGetUserList)
	e.POST("/service.v1.Account/AddUser", accountAddUser)
	e.POST("/service.v1.Account/UpdateUser", accountUpdateUser)
	e.POST("/service.v1.Account/DeleteUser", accountDeleteUser)
	e.POST("/service.v1.Account/SetUserRole", accountSetUserRole)
}

// TokenBMServer is the server API for Token service.
type TokenBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// Request for a token for upload.
	// `method:"POST" internal:"true"`
	Request(ctx context.Context, req *NewTokenReq) (resp *NewTokenResp, err error)

	// `method:"POST" internal:"true"`
	Verify(ctx context.Context, req *VerifyTokenReq) (resp *VerifyTokenResp, err error)
}

var TokenSvc TokenBMServer

func tokenPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Ping(c, p)
	c.JSON(resp, err)
}

func tokenRequest(c *bm.Context) {
	p := new(NewTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Request(c, p)
	c.JSON(resp, err)
}

func tokenVerify(c *bm.Context) {
	p := new(VerifyTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TokenSvc.Verify(c, p)
	c.JSON(resp, err)
}

// RegisterTokenBMServer Register the blademaster route
func RegisterTokenBMServer(e *bm.Engine, server TokenBMServer) {
	TokenSvc = server
	e.GET("/service.v1.Token/Ping", tokenPing)
	e.POST("/service.v1.Token/Request", tokenRequest)
	e.POST("/service.v1.Token/Verify", tokenVerify)
}
